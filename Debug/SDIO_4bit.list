
SDIO_4bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004274  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20004280  20004280  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017289  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002dd4  00000000  00000000  000372c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b70  00000000  00000000  0003a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a28  00000000  00000000  0003ac10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006901  00000000  00000000  0003b638  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003686  00000000  00000000  00041f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000455bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cc4  00000000  00000000  0004563c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bb0 	.word	0x08006bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006bb0 	.word	0x08006bb0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f947 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f006 fa46 	bl	800699c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f95f 	bl	80007fe <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f927 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000064 	.word	0x20000064

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000064 	.word	0x20000064

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3f7      	bcc.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800066e:	4909      	ldr	r1, [pc, #36]	; (8000694 <NVIC_EnableIRQ+0x30>)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	095b      	lsrs	r3, r3, #5
 8000676:	79fa      	ldrb	r2, [r7, #7]
 8000678:	f002 021f 	and.w	r2, r2, #31
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	da0b      	bge.n	80006c4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	490d      	ldr	r1, [pc, #52]	; (80006e4 <NVIC_SetPriority+0x4c>)
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	3b04      	subs	r3, #4
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c2:	e009      	b.n	80006d8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	4908      	ldr	r1, [pc, #32]	; (80006e8 <NVIC_SetPriority+0x50>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	e000e100 	.word	0xe000e100

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	2201      	movs	r2, #1
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	401a      	ands	r2, r3
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000732:	2101      	movs	r1, #1
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	1e59      	subs	r1, r3, #1
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff90 	bl	8000698 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff2f 	bl	8000600 <NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff44 	bl	8000648 <NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff37 	bl	8000664 <NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b04      	cmp	r3, #4
 8000824:	d106      	bne.n	8000834 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000832:	e005      	b.n	8000840 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f023 0304 	bic.w	r3, r3, #4
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000854:	f000 f802 	bl	800085c <HAL_SYSTICK_Callback>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff fe94 	bl	80005a4 <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e099      	b.n	80009bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2202      	movs	r2, #2
 8000894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	f022 0201 	bic.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a8:	e00f      	b.n	80008ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008aa:	f7ff fe7b 	bl	80005a4 <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d908      	bls.n	80008ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2220      	movs	r2, #32
 80008bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2203      	movs	r2, #3
 80008c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e078      	b.n	80009bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1e8      	bne.n	80008aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <HAL_DMA_Init+0x158>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	2b04      	cmp	r3, #4
 8000922:	d107      	bne.n	8000934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4313      	orrs	r3, r2
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4313      	orrs	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	4313      	orrs	r3, r2
 8000954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	2b04      	cmp	r3, #4
 800095c:	d117      	bne.n	800098e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4313      	orrs	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00e      	beq.n	800098e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa99 	bl	8000ea8 <DMA_CheckFifoParam>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d008      	beq.n	800098e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2240      	movs	r2, #64	; 0x40
 8000980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800098a:	2301      	movs	r3, #1
 800098c:	e016      	b.n	80009bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa50 	bl	8000e3c <DMA_CalcBaseAndBitshift>
 800099c:	4603      	mov	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	223f      	movs	r2, #63	; 0x3f
 80009a6:	409a      	lsls	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	f010803f 	.word	0xf010803f

080009c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d101      	bne.n	80009ee <HAL_DMA_Start_IT+0x26>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e048      	b.n	8000a80 <HAL_DMA_Start_IT+0xb8>
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d137      	bne.n	8000a72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f9e2 	bl	8000de0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a20:	223f      	movs	r2, #63	; 0x3f
 8000a22:	409a      	lsls	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	f042 0216 	orr.w	r2, r2, #22
 8000a36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	6952      	ldr	r2, [r2, #20]
 8000a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a46:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d007      	beq.n	8000a60 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	f042 0208 	orr.w	r2, r2, #8
 8000a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	f042 0201 	orr.w	r2, r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e005      	b.n	8000a7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d004      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00c      	b.n	8000ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	6812      	ldr	r2, [r2, #0]
 8000ab8:	f022 0201 	bic.w	r2, r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ad8:	4b92      	ldr	r3, [pc, #584]	; (8000d24 <HAL_DMA_IRQHandler+0x258>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_DMA_IRQHandler+0x25c>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0a9b      	lsrs	r3, r3, #10
 8000ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	2208      	movs	r2, #8
 8000af8:	409a      	lsls	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d01a      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d013      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b24:	2208      	movs	r2, #8
 8000b26:	409a      	lsls	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b30:	f043 0201 	orr.w	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4013      	ands	r3, r2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d012      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b66:	f043 0202 	orr.w	r2, r3, #2
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b72:	2204      	movs	r2, #4
 8000b74:	409a      	lsls	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00b      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b90:	2204      	movs	r2, #4
 8000b92:	409a      	lsls	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9c:	f043 0204 	orr.w	r2, r3, #4
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba8:	2210      	movs	r2, #16
 8000baa:	409a      	lsls	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d043      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d03c      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d018      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d108      	bne.n	8000bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d024      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	4798      	blx	r3
 8000bfa:	e01f      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01b      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	4798      	blx	r3
 8000c0c:	e016      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	f022 0208 	bic.w	r2, r2, #8
 8000c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c40:	2220      	movs	r2, #32
 8000c42:	409a      	lsls	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 808e 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 8086 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c62:	2220      	movs	r2, #32
 8000c64:	409a      	lsls	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d136      	bne.n	8000ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	f022 0216 	bic.w	r2, r2, #22
 8000c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	6952      	ldr	r2, [r2, #20]
 8000c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <HAL_DMA_IRQHandler+0x1da>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	f022 0208 	bic.w	r2, r2, #8
 8000cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cba:	223f      	movs	r2, #63	; 0x3f
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d07d      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	4798      	blx	r3
        }
        return;
 8000ce2:	e078      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01c      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d108      	bne.n	8000d12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d030      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	4798      	blx	r3
 8000d10:	e02b      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d027      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
 8000d22:	e022      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
 8000d24:	20000008 	.word	0x20000008
 8000d28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	f022 0210 	bic.w	r2, r2, #16
 8000d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d032      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d022      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2205      	movs	r2, #5
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	6812      	ldr	r2, [r2, #0]
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d807      	bhi.n	8000db2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f2      	bne.n	8000d96 <HAL_DMA_IRQHandler+0x2ca>
 8000db0:	e000      	b.n	8000db4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000db2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	4798      	blx	r3
 8000dd4:	e000      	b.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dd6:	bf00      	nop
    }
  }
}
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop

08000de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b40      	cmp	r3, #64	; 0x40
 8000e0c:	d108      	bne.n	8000e20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e1e:	e007      	b.n	8000e30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3b10      	subs	r3, #16
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e56:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d909      	bls.n	8000e7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e72:	f023 0303 	bic.w	r3, r3, #3
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	659a      	str	r2, [r3, #88]	; 0x58
 8000e7c:	e007      	b.n	8000e8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	aaaaaaab 	.word	0xaaaaaaab
 8000ea4:	08006c68 	.word	0x08006c68

08000ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11f      	bne.n	8000f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d855      	bhi.n	8000f74 <DMA_CheckFifoParam+0xcc>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <DMA_CheckFifoParam+0x28>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000ef3 	.word	0x08000ef3
 8000ed8:	08000ee1 	.word	0x08000ee1
 8000edc:	08000f75 	.word	0x08000f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d045      	beq.n	8000f78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ef0:	e042      	b.n	8000f78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000efa:	d13f      	bne.n	8000f7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f00:	e03c      	b.n	8000f7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0a:	d121      	bne.n	8000f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d836      	bhi.n	8000f80 <DMA_CheckFifoParam+0xd8>
 8000f12:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <DMA_CheckFifoParam+0x70>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	08000f2f 	.word	0x08000f2f
 8000f20:	08000f29 	.word	0x08000f29
 8000f24:	08000f41 	.word	0x08000f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f2c:	e02f      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f3e:	e021      	b.n	8000f84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f48:	d11e      	bne.n	8000f88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f4e:	e01b      	b.n	8000f88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d902      	bls.n	8000f5c <DMA_CheckFifoParam+0xb4>
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d003      	beq.n	8000f62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f5a:	e018      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f60:	e015      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00e      	beq.n	8000f8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
      break;
 8000f72:	e00b      	b.n	8000f8c <DMA_CheckFifoParam+0xe4>
      break;
 8000f74:	bf00      	nop
 8000f76:	e00a      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e008      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e006      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f80:	bf00      	nop
 8000f82:	e004      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;   
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <DMA_CheckFifoParam+0xe6>
      break;
 8000f8c:	bf00      	nop
    }
  } 
  
  return status; 
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e16b      	b.n	8001290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 815a 	bne.w	800128a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x4a>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	69b9      	ldr	r1, [r7, #24]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00b      	beq.n	8001082 <HAL_GPIO_Init+0xe6>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001076:	2b11      	cmp	r3, #17
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b12      	cmp	r3, #18
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80b4 	beq.w	800128a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <HAL_GPIO_Init+0x308>)
 8001128:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <HAL_GPIO_Init+0x308>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <HAL_GPIO_Init+0x308>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a5a      	ldr	r2, [pc, #360]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a51      	ldr	r2, [pc, #324]	; (80012ac <HAL_GPIO_Init+0x310>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a50      	ldr	r2, [pc, #320]	; (80012b0 <HAL_GPIO_Init+0x314>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x222>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x318>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x31c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x21a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x320>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x216>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x324>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x212>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_GPIO_Init+0x328>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x20e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x20a>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e00e      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011a6:	2308      	movs	r3, #8
 80011a8:	e00c      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00a      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ae:	2305      	movs	r3, #5
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4934      	ldr	r1, [pc, #208]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e2:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_GPIO_Init+0x330>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001206:	4a31      	ldr	r2, [pc, #196]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x330>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001230:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_GPIO_Init+0x330>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001284:	4a11      	ldr	r2, [pc, #68]	; (80012cc <HAL_GPIO_Init+0x330>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f ae90 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	3724      	adds	r7, #36	; 0x24
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ec:	e003      	b.n	80012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e22d      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d075      	beq.n	800140e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	4ba3      	ldr	r3, [pc, #652]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b04      	cmp	r3, #4
 800132c:	d00c      	beq.n	8001348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4ba0      	ldr	r3, [pc, #640]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001336:	2b08      	cmp	r3, #8
 8001338:	d112      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133a:	4b9d      	ldr	r3, [pc, #628]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001346:	d10b      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	4b99      	ldr	r3, [pc, #612]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d05b      	beq.n	800140c <HAL_RCC_OscConfig+0x108>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d157      	bne.n	800140c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e208      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d106      	bne.n	8001378 <HAL_RCC_OscConfig+0x74>
 800136a:	4a91      	ldr	r2, [pc, #580]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x98>
 8001382:	4a8b      	ldr	r2, [pc, #556]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	4b8a      	ldr	r3, [pc, #552]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4a88      	ldr	r2, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 800139c:	4a84      	ldr	r2, [pc, #528]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 800139e:	4b84      	ldr	r3, [pc, #528]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4a81      	ldr	r2, [pc, #516]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff f8f2 	bl	80005a4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff f8ee 	bl	80005a4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1cd      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xc0>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff f8de 	bl	80005a4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff f8da 	bl	80005a4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1b9      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0xe8>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b5c      	ldr	r3, [pc, #368]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e18d      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4956      	ldr	r1, [pc, #344]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <HAL_RCC_OscConfig+0x2b0>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff f893 	bl	80005a4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff f88f 	bl	80005a4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e16e      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4943      	ldr	r1, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_RCC_OscConfig+0x2b0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff f872 	bl	80005a4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff f86e 	bl	80005a4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e14d      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d030      	beq.n	8001550 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d016      	beq.n	8001524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_RCC_OscConfig+0x2b4>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff f852 	bl	80005a4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff f84e 	bl	80005a4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e12d      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x200>
 8001522:	e015      	b.n	8001550 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x2b4>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff f83b 	bl	80005a4 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff f837 	bl	80005a4 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e116      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a0 	beq.w	800169e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10f      	bne.n	800158e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_OscConfig+0x2b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d121      	bne.n	80015de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_RCC_OscConfig+0x2b8>)
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_RCC_OscConfig+0x2b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7fe fffd 	bl	80005a4 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e011      	b.n	80015d2 <HAL_RCC_OscConfig+0x2ce>
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	42470000 	.word	0x42470000
 80015b8:	42470e80 	.word	0x42470e80
 80015bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c0:	f7fe fff0 	bl	80005a4 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0cf      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b6a      	ldr	r3, [pc, #424]	; (800177c <HAL_RCC_OscConfig+0x478>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2f0>
 80015e6:	4a66      	ldr	r2, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 80015e8:	4b65      	ldr	r3, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	e01c      	b.n	800162e <HAL_RCC_OscConfig+0x32a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x312>
 80015fc:	4a60      	ldr	r2, [pc, #384]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 80015fe:	4b60      	ldr	r3, [pc, #384]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	4a5d      	ldr	r2, [pc, #372]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 800160a:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
 8001614:	e00b      	b.n	800162e <HAL_RCC_OscConfig+0x32a>
 8001616:	4a5a      	ldr	r2, [pc, #360]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001618:	4b59      	ldr	r3, [pc, #356]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	; 0x70
 8001622:	4a57      	ldr	r2, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001624:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d015      	beq.n	8001662 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7fe ffb5 	bl	80005a4 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7fe ffb1 	bl	80005a4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f241 3288 	movw	r2, #5000	; 0x1388
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e08e      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0ee      	beq.n	800163e <HAL_RCC_OscConfig+0x33a>
 8001660:	e014      	b.n	800168c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7fe ff9f 	bl	80005a4 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7fe ff9b 	bl	80005a4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e078      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ee      	bne.n	800166a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d105      	bne.n	800169e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001692:	4a3b      	ldr	r2, [pc, #236]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001694:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d064      	beq.n	8001770 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d05c      	beq.n	800176c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d141      	bne.n	800173e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_RCC_OscConfig+0x480>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7fe ff70 	bl	80005a4 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7fe ff6c 	bl	80005a4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e04b      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e6:	4926      	ldr	r1, [pc, #152]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69da      	ldr	r2, [r3, #28]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	061b      	lsls	r3, r3, #24
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_RCC_OscConfig+0x480>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7fe ff45 	bl	80005a4 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171e:	f7fe ff41 	bl	80005a4 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e020      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x41a>
 800173c:	e018      	b.n	8001770 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_RCC_OscConfig+0x480>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7fe ff2e 	bl	80005a4 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174c:	f7fe ff2a 	bl	80005a4 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e009      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_RCC_OscConfig+0x47c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x448>
 800176a:	e001      	b.n	8001770 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40007000 	.word	0x40007000
 8001780:	40023800 	.word	0x40023800
 8001784:	42470060 	.word	0x42470060

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0ca      	b.n	8001932 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b67      	ldr	r3, [pc, #412]	; (800193c <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 020f 	and.w	r2, r3, #15
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b64      	ldr	r3, [pc, #400]	; (800193c <HAL_RCC_ClockConfig+0x1b4>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_RCC_ClockConfig+0x1b4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 020f 	and.w	r2, r3, #15
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0b6      	b.n	8001932 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017dc:	4a58      	ldr	r2, [pc, #352]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	4b58      	ldr	r3, [pc, #352]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f4:	4a52      	ldr	r2, [pc, #328]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001800:	494f      	ldr	r1, [pc, #316]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d044      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b46      	ldr	r3, [pc, #280]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d119      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07d      	b.n	8001932 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d003      	beq.n	8001846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	2b03      	cmp	r3, #3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06d      	b.n	8001932 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e065      	b.n	8001932 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001866:	4936      	ldr	r1, [pc, #216]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f023 0203 	bic.w	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001878:	f7fe fe94 	bl	80005a4 <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7fe fe90 	bl	80005a4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e04d      	b.n	8001932 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 020c 	and.w	r2, r3, #12
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1eb      	bne.n	8001880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_RCC_ClockConfig+0x1b4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 020f 	and.w	r2, r3, #15
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d90c      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_ClockConfig+0x1b4>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_RCC_ClockConfig+0x1b4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 020f 	and.w	r2, r3, #15
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e030      	b.n	8001932 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	4918      	ldr	r1, [pc, #96]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fa:	4911      	ldr	r1, [pc, #68]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190e:	f000 f81d 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8001912:	4601      	mov	r1, r0
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	fa21 f303 	lsr.w	r3, r1, r3
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800192a:	2000      	movs	r0, #0
 800192c:	f7fe fdf6 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	08006d04 	.word	0x08006d04
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001950:	b08f      	sub	sp, #60	; 0x3c
 8001952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001964:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d007      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x34>
 8001970:	2b08      	cmp	r3, #8
 8001972:	d008      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x3a>
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 80b2 	bne.w	8001ade <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197a:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800197e:	e0b1      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001980:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001984:	e0ae      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d04e      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	f04f 0400 	mov.w	r4, #0
 80019a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	ea01 0103 	and.w	r1, r1, r3
 80019b2:	ea02 0204 	and.w	r2, r2, r4
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	0160      	lsls	r0, r4, #5
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24
 80019be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019c0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80019c4:	6278      	str	r0, [r7, #36]	; 0x24
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019ce:	1a5b      	subs	r3, r3, r1
 80019d0:	eb64 0402 	sbc.w	r4, r4, r2
 80019d4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80019d8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80019dc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80019e0:	ebb8 0803 	subs.w	r8, r8, r3
 80019e4:	eb69 0904 	sbc.w	r9, r9, r4
 80019e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a00:	eb18 0801 	adds.w	r8, r8, r1
 8001a04:	eb49 0902 	adc.w	r9, r9, r2
 8001a08:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a20:	4640      	mov	r0, r8
 8001a22:	4649      	mov	r1, r9
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4623      	mov	r3, r4
 8001a2e:	f7fe fbcb 	bl	80001c8 <__aeabi_uldivmod>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
 8001a38:	e043      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	ea01 0103 	and.w	r1, r1, r3
 8001a50:	ea02 0204 	and.w	r2, r2, r4
 8001a54:	460b      	mov	r3, r1
 8001a56:	4614      	mov	r4, r2
 8001a58:	0160      	lsls	r0, r4, #5
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a6c:	1a5b      	subs	r3, r3, r1
 8001a6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001a72:	01a6      	lsls	r6, r4, #6
 8001a74:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001a78:	019d      	lsls	r5, r3, #6
 8001a7a:	1aed      	subs	r5, r5, r3
 8001a7c:	eb66 0604 	sbc.w	r6, r6, r4
 8001a80:	00f3      	lsls	r3, r6, #3
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	00eb      	lsls	r3, r5, #3
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001a94:	186d      	adds	r5, r5, r1
 8001a96:	eb46 0602 	adc.w	r6, r6, r2
 8001a9a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001a9e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001aa2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001aa6:	4655      	mov	r5, sl
 8001aa8:	465e      	mov	r6, fp
 8001aaa:	4628      	mov	r0, r5
 8001aac:	4631      	mov	r1, r6
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	f04f 0400 	mov.w	r4, #0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	f7fe fb86 	bl	80001c8 <__aeabi_uldivmod>
 8001abc:	4603      	mov	r3, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	3301      	adds	r3, #1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001adc:	e002      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	373c      	adds	r7, #60	; 0x3c
 8001aea:	46bd      	mov	sp, r7
 8001aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000008 	.word	0x20000008

08001b14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01d      	b.n	8001b62 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f004 fe5d 	bl	80067f8 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2203      	movs	r2, #3
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f810 	bl	8001b6c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af04      	add	r7, sp, #16
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001b8c:	2376      	movs	r3, #118	; 0x76
 8001b8e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681d      	ldr	r5, [r3, #0]
 8001b94:	466c      	mov	r4, sp
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f001 fa8f 	bl	80030cc <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_SD_InitCard+0xb4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 fad0 	bl	800315e <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_SD_InitCard+0xb4>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7fe fcf9 	bl	80005bc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fffc 	bl	8002bc8 <SD_PowerON>
 8001bd0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e013      	b.n	8001c18 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 ff20 	bl	8002a36 <SD_InitCard>
 8001bf6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c20:	422580a0 	.word	0x422580a0

08001c24 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0ab      	b.n	8001da4 <HAL_SD_ReadBlocks_DMA+0x180>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	f040 80a4 	bne.w	8001da2 <HAL_SD_ReadBlocks_DMA+0x17e>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	441a      	add	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d907      	bls.n	8001c7e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e092      	b.n	8001da4 <HAL_SD_ReadBlocks_DMA+0x180>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITER
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c98:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	4a42      	ldr	r2, [pc, #264]	; (8001dac <HAL_SD_ReadBlocks_DMA+0x188>)
 8001ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	4a41      	ldr	r2, [pc, #260]	; (8001db0 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8001cac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3380      	adds	r3, #128	; 0x80
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	f7fe fe7d 	bl	80009c8 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8001cce:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <HAL_SD_ReadBlocks_DMA+0x190>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d002      	beq.n	8001ce2 <HAL_SD_ReadBlocks_DMA+0xbe>
    {
      BlockAdd *= 512U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	025b      	lsls	r3, r3, #9
 8001ce0:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001cee:	2390      	movs	r3, #144	; 0x90
 8001cf0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f107 0214 	add.w	r2, r7, #20
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 fa90 	bl	800322e <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fab5 	bl	8003286 <SDMMC_CmdBlockLength>
 8001d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d010      	beq.n	8001d46 <HAL_SD_ReadBlocks_DMA+0x122>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e02e      	b.n	8001da4 <HAL_SD_ReadBlocks_DMA+0x180>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d90a      	bls.n	8001d62 <HAL_SD_ReadBlocks_DMA+0x13e>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2282      	movs	r2, #130	; 0x82
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 fadc 	bl	8003316 <SDMMC_CmdReadMultiBlock>
 8001d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d60:	e009      	b.n	8001d76 <HAL_SD_ReadBlocks_DMA+0x152>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2281      	movs	r2, #129	; 0x81
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 faad 	bl	80032ce <SDMMC_CmdReadSingleBlock>
 8001d74:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_SD_ReadBlocks_DMA+0x17a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e002      	b.n	8001da4 <HAL_SD_ReadBlocks_DMA+0x180>
    }

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_SD_ReadBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3730      	adds	r7, #48	; 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	08002847 	.word	0x08002847
 8001db0:	080028b5 	.word	0x080028b5
 8001db4:	4225858c 	.word	0x4225858c

08001db8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0ab      	b.n	8001f38 <HAL_SD_WriteBlocks_DMA+0x180>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	f040 80a4 	bne.w	8001f36 <HAL_SD_WriteBlocks_DMA+0x17e>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	441a      	add	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d907      	bls.n	8001e12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e092      	b.n	8001f38 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2203      	movs	r2, #3
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITER
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e2c:	f042 021a 	orr.w	r2, r2, #26
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <HAL_SD_WriteBlocks_DMA+0x188>)
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8001e40:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2200      	movs	r2, #0
 8001e48:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d002      	beq.n	8001e58 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fa10 	bl	8003286 <SDMMC_CmdBlockLength>
 8001e66:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e053      	b.n	8001f38 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d90a      	bls.n	8001eac <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	22a0      	movs	r2, #160	; 0xa0
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 fa7f 	bl	80033a6 <SDMMC_CmdWriteMultiBlock>
 8001ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001eaa:	e009      	b.n	8001ec0 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2290      	movs	r2, #144	; 0x90
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fa50 	bl	800335e <SDMMC_CmdWriteSingleBlock>
 8001ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e027      	b.n	8001f38 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_SD_WriteBlocks_DMA+0x190>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3380      	adds	r3, #128	; 0x80
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	025b      	lsls	r3, r3, #9
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	f7fe fd61 	bl	80009c8 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	025b      	lsls	r3, r3, #9
 8001f10:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001f12:	2390      	movs	r3, #144	; 0x90
 8001f14:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f107 0214 	add.w	r2, r7, #20
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 f97e 	bl	800322e <SDIO_ConfigData>
    
    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_SD_WriteBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	0800281d 	.word	0x0800281d
 8001f44:	080028b5 	.word	0x080028b5
 8001f48:	4225858c 	.word	0x4225858c

08001f4c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 808d 	beq.w	8002082 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8001f80:	f023 0302 	bic.w	r3, r3, #2
 8001f84:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d03a      	beq.n	8002008 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <HAL_SD_IRQHandler+0x5e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d011      	beq.n	8001fce <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 fa1e 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8001fb4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f925 	bl	8002218 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_SD_IRQHandler+0xac>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f004 f8ed 	bl	80061d8 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8001ffe:	e103      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f004 f8df 	bl	80061c4 <HAL_SD_TxCpltCallback>
}
 8002006:	e0ff      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80f9 	beq.w	8002208 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d011      	beq.n	8002046 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f001 f9e2 	bl	80033f0 <SDMMC_CmdStopTransfer>
 800202c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f8e9 	bl	8002218 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80da 	bne.w	8002208 <HAL_SD_IRQHandler+0x2bc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 80d3 	bne.w	8002208 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800206c:	f022 0208 	bic.w	r2, r2, #8
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f004 f8a2 	bl	80061c4 <HAL_SD_TxCpltCallback>
}
 8002080:	e0c2      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fff0 	bl	8003080 <SD_Write_IT>
}
 80020a0:	e0b2      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 ffb8 	bl	8003030 <SD_Read_IT>
}
 80020c0:	e0a2      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c8:	f240 233a 	movw	r3, #570	; 0x23a
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 809a 	beq.w	8002208 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	f043 0208 	orr.w	r2, r3, #8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	f043 0220 	orr.w	r2, r3, #32
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	f043 0208 	orr.w	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800216e:	f023 0302 	bic.w	r3, r3, #2
 8002172:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d036      	beq.n	80021ee <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d011      	beq.n	80021ac <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_SD_IRQHandler+0x2c4>)
 800218e:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fc77 	bl	8000a88 <HAL_DMA_Abort_IT>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d033      	beq.n	8002208 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fbca 	bl	800293e <SD_DMATxAbort>
}
 80021aa:	e02d      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d011      	beq.n	80021d8 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_SD_IRQHandler+0x2c8>)
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fc61 	bl	8000a88 <HAL_DMA_Abort_IT>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01d      	beq.n	8002208 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fbf2 	bl	80029ba <SD_DMARxAbort>
}
 80021d6:	e017      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f003 ffe2 	bl	80061b0 <HAL_SD_AbortCallback>
}
 80021ec:	e00c      	b.n	8002208 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f808 	bl	8002218 <HAL_SD_ErrorCallback>
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	0800293f 	.word	0x0800293f
 8002214:	080029bb 	.word	0x080029bb

08002218 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800222c:	b490      	push	{r4, r7}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800223e:	0e1b      	lsrs	r3, r3, #24
 8002240:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	b2da      	uxtb	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	b2da      	uxtb	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	b2da      	uxtb	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	b2db      	uxtb	r3, r3
 8002278:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b2db      	uxtb	r3, r3
 800228a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002298:	b2db      	uxtb	r3, r3
 800229a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022a8:	0e1b      	lsrs	r3, r3, #24
 80022aa:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	88db      	ldrh	r3, [r3, #6]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	09db      	lsrs	r3, r3, #7
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 8086 	bne.w	8002450 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002354:	b2db      	uxtb	r3, r3
 8002356:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	431a      	orrs	r2, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236a:	0e1b      	lsrs	r3, r3, #24
 800236c:	b2db      	uxtb	r3, r3
 800236e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	431a      	orrs	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	b2da      	uxtb	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	b2da      	uxtb	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 0306 	and.w	r3, r3, #6
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7e1b      	ldrb	r3, [r3, #24]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	09db      	lsrs	r3, r3, #7
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	7e1b      	ldrb	r3, [r3, #24]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3302      	adds	r3, #2
 8002412:	2201      	movs	r2, #1
 8002414:	409a      	lsls	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	fb02 f203 	mul.w	r2, r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	7a1b      	ldrb	r3, [r3, #8]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	2301      	movs	r3, #1
 800242c:	fa03 f202 	lsl.w	r2, r3, r2
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800243c:	0a52      	lsrs	r2, r2, #9
 800243e:	fb02 f203 	mul.w	r2, r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244c:	661a      	str	r2, [r3, #96]	; 0x60
 800244e:	e051      	b.n	80024f4 <HAL_SD_GetCardCSD+0x2c8>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	2b01      	cmp	r3, #1
 8002456:	d13c      	bne.n	80024d2 <HAL_SD_GetCardCSD+0x2a6>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800245c:	b2db      	uxtb	r3, r3
 800245e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002470:	0e1b      	lsrs	r3, r3, #24
 8002472:	b2db      	uxtb	r3, r3
 8002474:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	431a      	orrs	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	b2db      	uxtb	r3, r3
 800248c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	431a      	orrs	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f04f 0400 	mov.w	r4, #0
 80024ac:	3301      	adds	r3, #1
 80024ae:	f144 0400 	adc.w	r4, r4, #0
 80024b2:	029a      	lsls	r2, r3, #10
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c6:	659a      	str	r2, [r3, #88]	; 0x58
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
 80024d0:	e010      	b.n	80024f4 <HAL_SD_GetCardCSD+0x2c8>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0c1      	b.n	8002678 <HAL_SD_GetCardCSD+0x44c>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002510:	b2da      	uxtb	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	b2db      	uxtb	r3, r3
 800251c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7e9b      	ldrb	r3, [r3, #26]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	09db      	lsrs	r3, r3, #7
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b2da      	uxtb	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002540:	b2da      	uxtb	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	0e1b      	lsrs	r3, r3, #24
 800254c:	b2db      	uxtb	r3, r3
 800254e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	09db      	lsrs	r3, r3, #7
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	b2da      	uxtb	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	b2da      	uxtb	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	b2da      	uxtb	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	b2db      	uxtb	r3, r3
 800259a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	7fdb      	ldrb	r3, [r3, #31]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	09db      	lsrs	r3, r3, #7
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	b2da      	uxtb	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	b2da      	uxtb	r2, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	b2db      	uxtb	r3, r3
 800265a:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002666:	b2da      	uxtb	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bc90      	pop	{r4, r7}
 8002680:	4770      	bx	lr

08002682 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80026da:	b5b0      	push	{r4, r5, r7, lr}
 80026dc:	b08e      	sub	sp, #56	; 0x38
 80026de:	af04      	add	r7, sp, #16
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2203      	movs	r2, #3
 80026ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d02e      	beq.n	8002756 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fe:	d106      	bne.n	800270e <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
 800270c:	e029      	b.n	8002762 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002714:	d10a      	bne.n	800272c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fb28 	bl	8002d6c <SD_WideBus_Enable>
 800271c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
 800272a:	e01a      	b.n	8002762 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fb67 	bl	8002e06 <SD_WideBus_Disable>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
 8002746:	e00c      	b.n	8002762 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
 8002754:	e005      	b.n	8002762 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e024      	b.n	80027ca <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681d      	ldr	r5, [r3, #0]
 80027a6:	466c      	mov	r4, sp
 80027a8:	f107 0318 	add.w	r3, r7, #24
 80027ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ba:	4628      	mov	r0, r5
 80027bc:	f000 fc86 	bl	80030cc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3728      	adds	r7, #40	; 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bdb0      	pop	{r4, r5, r7, pc}

080027d2 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80027da:	2304      	movs	r3, #4
 80027dc:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fa93 	bl	8002d18 <SD_SendStatus>
 80027f2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0a5b      	lsrs	r3, r3, #9
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002838:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	2b82      	cmp	r3, #130	; 0x82
 800285e:	d111      	bne.n	8002884 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fdc3 	bl	80033f0 <SDMMC_CmdStopTransfer>
 800286a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	431a      	orrs	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff fcca 	bl	8002218 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800288e:	f022 0208 	bic.w	r2, r2, #8
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  HAL_SD_RxCpltCallback(hsd);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f003 fc96 	bl	80061d8 <HAL_SD_RxCpltCallback>
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d004      	beq.n	80028d6 <SD_DMAError+0x22>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d12c      	bne.n	8002930 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80028de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ea:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80028ee:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff ff68 	bl	80027d2 <HAL_SD_GetCardState>
 8002902:	4603      	mov	r3, r0
 8002904:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d002      	beq.n	8002912 <SD_DMAError+0x5e>
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d10a      	bne.n	8002928 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fd6a 	bl	80033f0 <SDMMC_CmdStopTransfer>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	431a      	orrs	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  HAL_SD_ErrorCallback(hsd);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fc71 	bl	8002218 <HAL_SD_ErrorCallback>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d127      	bne.n	80029b2 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ff35 	bl	80027d2 <HAL_SD_GetCardState>
 8002968:	4603      	mov	r3, r0
 800296a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d002      	beq.n	8002986 <SD_DMATxAbort+0x48>
 8002980:	7afb      	ldrb	r3, [r7, #11]
 8002982:	2b05      	cmp	r3, #5
 8002984:	d115      	bne.n	80029b2 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fd30 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	431a      	orrs	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f003 fc03 	bl	80061b0 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 80029aa:	e002      	b.n	80029b2 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff fc33 	bl	8002218 <HAL_SD_ErrorCallback>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d127      	bne.n	8002a2e <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff fef7 	bl	80027d2 <HAL_SD_GetCardState>
 80029e4:	4603      	mov	r3, r0
 80029e6:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d002      	beq.n	8002a02 <SD_DMARxAbort+0x48>
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d115      	bne.n	8002a2e <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fcf2 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f003 fbc5 	bl	80061b0 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8002a26:	e002      	b.n	8002a2e <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fbf5 	bl	8002218 <HAL_SD_ErrorCallback>
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a36:	b5b0      	push	{r4, r5, r7, lr}
 8002a38:	b094      	sub	sp, #80	; 0x50
 8002a3a:	af04      	add	r7, sp, #16
 8002a3c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002a42:	2301      	movs	r3, #1
 8002a44:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb95 	bl	800317a <SDIO_GetPowerState>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a5a:	e0b1      	b.n	8002bc0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d02f      	beq.n	8002ac4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fddb 	bl	8003624 <SDMMC_CmdSendCID>
 8002a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <SD_InitCard+0x44>
    {
      return errorstate;
 8002a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a78:	e0a2      	b.n	8002bc0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fbbf 	bl	8003204 <SDIO_GetResponse>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2104      	movs	r1, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fbb6 	bl	8003204 <SDIO_GetResponse>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2108      	movs	r1, #8
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fbad 	bl	8003204 <SDIO_GetResponse>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	210c      	movs	r1, #12
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fba4 	bl	8003204 <SDIO_GetResponse>
 8002abc:	4602      	mov	r2, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d00d      	beq.n	8002ae8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f107 020e 	add.w	r2, r7, #14
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fde5 	bl	80036a6 <SDMMC_CmdSetRelAdd>
 8002adc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <SD_InitCard+0xb2>
    {
      return errorstate;
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	e06b      	b.n	8002bc0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d036      	beq.n	8002b5e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	461a      	mov	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f000 fdad 	bl	8003664 <SDMMC_CmdSendCSD>
 8002b0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <SD_InitCard+0xe0>
    {
      return errorstate;
 8002b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b14:	e054      	b.n	8002bc0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fb71 	bl	8003204 <SDIO_GetResponse>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fb68 	bl	8003204 <SDIO_GetResponse>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2108      	movs	r1, #8
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fb5f 	bl	8003204 <SDIO_GetResponse>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	210c      	movs	r1, #12
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fb56 	bl	8003204 <SDIO_GetResponse>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2104      	movs	r1, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fb4d 	bl	8003204 <SDIO_GetResponse>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	0d1a      	lsrs	r2, r3, #20
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	4619      	mov	r1, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fb57 	bl	800222c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	f04f 0400 	mov.w	r4, #0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4623      	mov	r3, r4
 8002b90:	4608      	mov	r0, r1
 8002b92:	f000 fc51 	bl	8003438 <SDMMC_CmdSelDesel>
 8002b96:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SD_InitCard+0x16c>
  {
    return errorstate;
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba0:	e00e      	b.n	8002bc0 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681d      	ldr	r5, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	466c      	mov	r4, sp
 8002baa:	f103 0210 	add.w	r2, r3, #16
 8002bae:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f000 fa87 	bl	80030cc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3740      	adds	r7, #64	; 0x40
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bdb0      	pop	{r4, r5, r7, pc}

08002bc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fc4c 	bl	8003482 <SDMMC_CmdGoIdleState>
 8002bea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <SD_PowerON+0x2e>
  {
    return errorstate;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	e08c      	b.n	8002d10 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fc61 	bl	80034c2 <SDMMC_CmdOperCond>
 8002c00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03d      	beq.n	8002c84 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002c0e:	e032      	b.n	8002c76 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	60ba      	str	r2, [r7, #8]
 8002c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d102      	bne.n	8002c24 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c22:	e075      	b.n	8002d10 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fc6a 	bl	8003504 <SDMMC_CmdAppCommand>
 8002c30:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c3c:	e068      	b.n	8002d10 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fc81 	bl	800354c <SDMMC_CmdAppOperCommand>
 8002c4a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c56:	e05b      	b.n	8002d10 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fad0 	bl	8003204 <SDIO_GetResponse>
 8002c64:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	0fdb      	lsrs	r3, r3, #31
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <SD_PowerON+0xaa>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <SD_PowerON+0xac>
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0c9      	beq.n	8002c10 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
 8002c82:	e044      	b.n	8002d0e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002c8a:	e031      	b.n	8002cf0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	60ba      	str	r2, [r7, #8]
 8002c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d102      	bne.n	8002ca0 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c9e:	e037      	b.n	8002d10 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fc2c 	bl	8003504 <SDMMC_CmdAppCommand>
 8002cac:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <SD_PowerON+0xf0>
      {
        return errorstate;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	e02b      	b.n	8002d10 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fc43 	bl	800354c <SDMMC_CmdAppOperCommand>
 8002cc6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <SD_PowerON+0x10a>
      {
        return errorstate;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	e01e      	b.n	8002d10 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fa93 	bl	8003204 <SDIO_GetResponse>
 8002cde:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	0fdb      	lsrs	r3, r3, #31
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <SD_PowerON+0x124>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <SD_PowerON+0x126>
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ca      	beq.n	8002c8c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44
 8002d06:	e002      	b.n	8002d0e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8002d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d30:	e018      	b.n	8002d64 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 fcd4 	bl	80036ec <SDMMC_CmdSendStatus>
 8002d44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <SD_SendStatus+0x38>
  {
    return errorstate;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	e009      	b.n	8002d64 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa54 	bl	8003204 <SDIO_GetResponse>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fa3c 	bl	8003204 <SDIO_GetResponse>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d96:	d102      	bne.n	8002d9e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d9c:	e02f      	b.n	8002dfe <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002d9e:	f107 030c 	add.w	r3, r7, #12
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f87b 	bl	8002ea0 <SD_FindSCR>
 8002daa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	e023      	b.n	8002dfe <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01c      	beq.n	8002dfa <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f000 fb99 	bl	8003504 <SDMMC_CmdAppCommand>
 8002dd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	e00f      	b.n	8002dfe <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2102      	movs	r1, #2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fbd6 	bl	8003596 <SDMMC_CmdBusWidth>
 8002dea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	e003      	b.n	8002dfe <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e001      	b.n	8002dfe <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f9ef 	bl	8003204 <SDIO_GetResponse>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e30:	d102      	bne.n	8002e38 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e36:	e02f      	b.n	8002e98 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f82e 	bl	8002ea0 <SD_FindSCR>
 8002e44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	e023      	b.n	8002e98 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01c      	beq.n	8002e94 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 fb4c 	bl	8003504 <SDMMC_CmdAppCommand>
 8002e6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	e00f      	b.n	8002e98 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fb89 	bl	8003596 <SDMMC_CmdBusWidth>
 8002e84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	e003      	b.n	8002e98 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e001      	b.n	8002e98 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b08f      	sub	sp, #60	; 0x3c
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002eae:	f7fd fb79 	bl	80005a4 <HAL_GetTick>
 8002eb2:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2108      	movs	r1, #8
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f9dd 	bl	8003286 <SDMMC_CmdBlockLength>
 8002ecc:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	e0a7      	b.n	8003028 <SD_FindSCR+0x188>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f000 fb0d 	bl	8003504 <SDMMC_CmdAppCommand>
 8002eea:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	e098      	b.n	8003028 <SD_FindSCR+0x188>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8002efc:	2308      	movs	r3, #8
 8002efe:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002f00:	2330      	movs	r3, #48	; 0x30
 8002f02:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f04:	2302      	movs	r3, #2
 8002f06:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f107 0214 	add.w	r2, r7, #20
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f987 	bl	800322e <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fb5a 	bl	80035de <SDMMC_CmdSendSCR>
 8002f2a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d022      	beq.n	8002f78 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	e078      	b.n	8003028 <SD_FindSCR+0x188>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	f107 020c 	add.w	r2, r7, #12
 8002f4c:	18d4      	adds	r4, r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f8e5 	bl	8003122 <SDIO_ReadFIFO>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6023      	str	r3, [r4, #0]
      index++;
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5e:	3301      	adds	r3, #1
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002f62:	f7fd fb1f 	bl	80005a4 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d102      	bne.n	8002f78 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002f72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f76:	e057      	b.n	8003028 <SD_FindSCR+0x188>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7e:	f240 432a 	movw	r3, #1066	; 0x42a
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0d6      	beq.n	8002f36 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	e042      	b.n	8003028 <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e035      	b.n	8003028 <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e028      	b.n	8003028 <SD_FindSCR+0x188>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	0611      	lsls	r1, r2, #24
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	0212      	lsls	r2, r2, #8
 8002fec:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8002ff0:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	0a12      	lsrs	r2, r2, #8
 8002ff6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002ffa:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	0e12      	lsrs	r2, r2, #24
 8003000:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003002:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	061a      	lsls	r2, r3, #24
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003010:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800301a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	0e1b      	lsrs	r3, r3, #24
 8003020:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	373c      	adds	r7, #60	; 0x3c
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e00d      	b.n	8003064 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	18d4      	adds	r4, r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f864 	bl	8003122 <SDIO_ReadFIFO>
 800305a:	4603      	mov	r3, r0
 800305c:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b07      	cmp	r3, #7
 8003068:	d9ee      	bls.n	8003048 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	f103 0220 	add.w	r2, r3, #32
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}

08003080 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e00b      	b.n	80030b0 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4413      	add	r3, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f000 f849 	bl	800313c <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3301      	adds	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	d9f0      	bls.n	8003098 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f103 0220 	add.w	r2, r3, #32
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80030cc:	b084      	sub	sp, #16
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	f107 001c 	add.w	r0, r7, #28
 80030da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80030e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80030e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80030e6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80030ea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80030ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80030f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80030f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003106:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	b004      	add	sp, #16
 8003120:	4770      	bx	lr

08003122 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0303 	and.w	r3, r3, #3
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031b4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80031ba:	431a      	orrs	r2, r3
                       Command->CPSM);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80031c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80031d0:	f023 030f 	bic.w	r3, r3, #15
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	b2db      	uxtb	r3, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3314      	adds	r3, #20
 8003216:	461a      	mov	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
}  
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003254:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800325a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003260:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003278:	2300      	movs	r3, #0

}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b088      	sub	sp, #32
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003298:	2310      	movs	r3, #16
 800329a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff70 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	2110      	movs	r1, #16
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fa63 	bl	8003788 <SDMMC_GetCmdResp1>
 80032c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032c4:	69fb      	ldr	r3, [r7, #28]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b088      	sub	sp, #32
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80032e0:	2311      	movs	r3, #17
 80032e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032e4:	2340      	movs	r3, #64	; 0x40
 80032e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032f2:	f107 0308 	add.w	r3, r7, #8
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff4c 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	2111      	movs	r1, #17
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fa3f 	bl	8003788 <SDMMC_GetCmdResp1>
 800330a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800330c:	69fb      	ldr	r3, [r7, #28]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b088      	sub	sp, #32
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003328:	2312      	movs	r3, #18
 800332a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800332c:	2340      	movs	r3, #64	; 0x40
 800332e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003338:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff28 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	2112      	movs	r1, #18
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fa1b 	bl	8003788 <SDMMC_GetCmdResp1>
 8003352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003354:	69fb      	ldr	r3, [r7, #28]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b088      	sub	sp, #32
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003370:	2318      	movs	r3, #24
 8003372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003374:	2340      	movs	r3, #64	; 0x40
 8003376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003380:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff04 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	2118      	movs	r1, #24
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f9f7 	bl	8003788 <SDMMC_GetCmdResp1>
 800339a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800339c:	69fb      	ldr	r3, [r7, #28]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b088      	sub	sp, #32
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80033b8:	2319      	movs	r3, #25
 80033ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033bc:	2340      	movs	r3, #64	; 0x40
 80033be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fee0 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	2119      	movs	r1, #25
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f9d3 	bl	8003788 <SDMMC_GetCmdResp1>
 80033e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033e4:	69fb      	ldr	r3, [r7, #28]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003400:	230c      	movs	r3, #12
 8003402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003404:	2340      	movs	r3, #64	; 0x40
 8003406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800340c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003410:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff febc 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800341e:	4a05      	ldr	r2, [pc, #20]	; (8003434 <SDMMC_CmdStopTransfer+0x44>)
 8003420:	210c      	movs	r1, #12
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9b0 	bl	8003788 <SDMMC_GetCmdResp1>
 8003428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800342a:	69fb      	ldr	r3, [r7, #28]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	05f5e100 	.word	0x05f5e100

08003438 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800344c:	2307      	movs	r3, #7
 800344e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003450:	2340      	movs	r3, #64	; 0x40
 8003452:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	4619      	mov	r1, r3
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff fe96 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	2107      	movs	r1, #7
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f989 	bl	8003788 <SDMMC_GetCmdResp1>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800347a:	4618      	mov	r0, r3
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b088      	sub	sp, #32
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800349e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fe73 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f93f 	bl	8003734 <SDMMC_GetCmdError>
 80034b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034b8:	69fb      	ldr	r3, [r7, #28]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b088      	sub	sp, #32
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80034ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80034d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80034d4:	2308      	movs	r3, #8
 80034d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034d8:	2340      	movs	r3, #64	; 0x40
 80034da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fe52 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fb10 	bl	8003b18 <SDMMC_GetCmdResp7>
 80034f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034fa:	69fb      	ldr	r3, [r7, #28]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003516:	2337      	movs	r3, #55	; 0x37
 8003518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800351a:	2340      	movs	r3, #64	; 0x40
 800351c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003526:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fe31 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	2137      	movs	r1, #55	; 0x37
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f924 	bl	8003788 <SDMMC_GetCmdResp1>
 8003540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003542:	69fb      	ldr	r3, [r7, #28]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003566:	2329      	movs	r3, #41	; 0x29
 8003568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800356a:	2340      	movs	r3, #64	; 0x40
 800356c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003576:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fe09 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa25 	bl	80039d4 <SDMMC_GetCmdResp3>
 800358a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800358c:	69fb      	ldr	r3, [r7, #28]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b088      	sub	sp, #32
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80035a8:	2306      	movs	r3, #6
 80035aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035ac:	2340      	movs	r3, #64	; 0x40
 80035ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fde8 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	2106      	movs	r1, #6
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8db 	bl	8003788 <SDMMC_GetCmdResp1>
 80035d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035d4:	69fb      	ldr	r3, [r7, #28]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b088      	sub	sp, #32
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80035ee:	2333      	movs	r3, #51	; 0x33
 80035f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035f2:	2340      	movs	r3, #64	; 0x40
 80035f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fdc5 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	2133      	movs	r1, #51	; 0x33
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8b8 	bl	8003788 <SDMMC_GetCmdResp1>
 8003618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800361a:	69fb      	ldr	r3, [r7, #28]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003634:	2302      	movs	r3, #2
 8003636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003638:	23c0      	movs	r3, #192	; 0xc0
 800363a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003644:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fda2 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f97e 	bl	8003954 <SDMMC_GetCmdResp2>
 8003658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800365a:	69fb      	ldr	r3, [r7, #28]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003676:	2309      	movs	r3, #9
 8003678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800367a:	23c0      	movs	r3, #192	; 0xc0
 800367c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003686:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003688:	f107 0308 	add.w	r3, r7, #8
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fd81 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f95d 	bl	8003954 <SDMMC_GetCmdResp2>
 800369a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800369c:	69fb      	ldr	r3, [r7, #28]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b088      	sub	sp, #32
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80036b8:	2303      	movs	r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fd60 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	2103      	movs	r1, #3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9ae 	bl	8003a3c <SDMMC_GetCmdResp6>
 80036e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036e2:	69fb      	ldr	r3, [r7, #28]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80036fe:	230d      	movs	r3, #13
 8003700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003702:	2340      	movs	r3, #64	; 0x40
 8003704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800370a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800370e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fd3d 	bl	8003196 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	210d      	movs	r1, #13
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f830 	bl	8003788 <SDMMC_GetCmdResp1>
 8003728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800372a:	69fb      	ldr	r3, [r7, #28]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003734:	b490      	push	{r4, r7}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <SDMMC_GetCmdError+0x4c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a10      	ldr	r2, [pc, #64]	; (8003784 <SDMMC_GetCmdError+0x50>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0a5b      	lsrs	r3, r3, #9
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003750:	4623      	mov	r3, r4
 8003752:	1e5c      	subs	r4, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800375c:	e00a      	b.n	8003774 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f2      	beq.n	8003750 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bc90      	pop	{r4, r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000008 	.word	0x20000008
 8003784:	10624dd3 	.word	0x10624dd3

08003788 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	460b      	mov	r3, r1
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003796:	4b6c      	ldr	r3, [pc, #432]	; (8003948 <SDMMC_GetCmdResp1+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6c      	ldr	r2, [pc, #432]	; (800394c <SDMMC_GetCmdResp1+0x1c4>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	0a5b      	lsrs	r3, r3, #9
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80037a8:	4623      	mov	r3, r4
 80037aa:	1e5c      	subs	r4, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80037b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80037b4:	e0c3      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f2      	beq.n	80037a8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2204      	movs	r2, #4
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80037d4:	2304      	movs	r3, #4
 80037d6:	e0b2      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0a7      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fcfb 	bl	80031ea <SDIO_GetCommandResponse>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d001      	beq.n	8003802 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80037fe:	2301      	movs	r3, #1
 8003800:	e09d      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800380a:	2100      	movs	r1, #0
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff fcf9 	bl	8003204 <SDIO_GetResponse>
 8003812:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <SDMMC_GetCmdResp1+0x1c8>)
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800381e:	2300      	movs	r3, #0
 8003820:	e08d      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	da02      	bge.n	800382e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382c:	e087      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003838:	2340      	movs	r3, #64	; 0x40
 800383a:	e080      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	e079      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003858:	e071      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003868:	e069      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003878:	e061      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003884:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003888:	e059      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003898:	e051      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80038a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038a8:	e049      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80038b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038b8:	e041      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80038c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c8:	e039      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80038d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d8:	e031      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80038e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038e8:	e029      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80038f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038f8:	e021      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003904:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003908:	e019      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003914:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003918:	e011      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003924:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003928:	e009      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003934:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003938:	e001      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800393a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	20000008 	.word	0x20000008
 800394c:	10624dd3 	.word	0x10624dd3
 8003950:	fdffe008 	.word	0xfdffe008

08003954 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003954:	b490      	push	{r4, r7}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <SDMMC_GetCmdResp2+0x78>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <SDMMC_GetCmdResp2+0x7c>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003970:	4623      	mov	r3, r4
 8003972:	1e5c      	subs	r4, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003978:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800397c:	e020      	b.n	80039c0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f2      	beq.n	8003970 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800399c:	2304      	movs	r3, #4
 800399e:	e00f      	b.n	80039c0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e004      	b.n	80039c0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc90      	pop	{r4, r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000008 	.word	0x20000008
 80039d0:	10624dd3 	.word	0x10624dd3

080039d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80039d4:	b490      	push	{r4, r7}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039dc:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <SDMMC_GetCmdResp3+0x60>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <SDMMC_GetCmdResp3+0x64>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80039f0:	4623      	mov	r3, r4
 80039f2:	1e5c      	subs	r4, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80039f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039fc:	e015      	b.n	8003a2a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f2      	beq.n	80039f0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e004      	b.n	8003a2a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc90      	pop	{r4, r7}
 8003a32:	4770      	bx	lr
 8003a34:	20000008 	.word	0x20000008
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	460b      	mov	r3, r1
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <SDMMC_GetCmdResp6+0xd4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <SDMMC_GetCmdResp6+0xd8>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	0a5b      	lsrs	r3, r3, #9
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003a5e:	4623      	mov	r3, r4
 8003a60:	1e5c      	subs	r4, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003a66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a6a:	e04c      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f2      	beq.n	8003a5e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2204      	movs	r2, #4
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e03b      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e030      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fba0 	bl	80031ea <SDIO_GetCommandResponse>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	7afb      	ldrb	r3, [r7, #11]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d001      	beq.n	8003ab8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e026      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff fb9e 	bl	8003204 <SDIO_GetResponse>
 8003ac8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e011      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003af0:	e009      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b00:	e001      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd90      	pop	{r4, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000008 	.word	0x20000008
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003b18:	b490      	push	{r4, r7}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b20:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <SDMMC_GetCmdResp7+0x6c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <SDMMC_GetCmdResp7+0x70>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0a5b      	lsrs	r3, r3, #9
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b34:	4623      	mov	r3, r4
 8003b36:	1e5c      	subs	r4, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b40:	e01a      	b.n	8003b78 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f2      	beq.n	8003b34 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b60:	2304      	movs	r3, #4
 8003b62:	e009      	b.n	8003b78 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b76:	2300      	movs	r3, #0
  
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc90      	pop	{r4, r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000008 	.word	0x20000008
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <disk_status+0x30>)
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	79fa      	ldrb	r2, [r7, #7]
 8003ba4:	4905      	ldr	r1, [pc, #20]	; (8003bbc <disk_status+0x30>)
 8003ba6:	440a      	add	r2, r1
 8003ba8:	7a12      	ldrb	r2, [r2, #8]
 8003baa:	4610      	mov	r0, r2
 8003bac:	4798      	blx	r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000050 	.word	0x20000050

08003bc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	4a0d      	ldr	r2, [pc, #52]	; (8003c08 <disk_initialize+0x48>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d111      	bne.n	8003bfc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <disk_initialize+0x48>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <disk_initialize+0x48>)
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	79fa      	ldrb	r2, [r7, #7]
 8003bee:	4906      	ldr	r1, [pc, #24]	; (8003c08 <disk_initialize+0x48>)
 8003bf0:	440a      	add	r2, r1
 8003bf2:	7a12      	ldrb	r2, [r2, #8]
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000050 	.word	0x20000050

08003c0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <disk_read+0x3c>)
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	689c      	ldr	r4, [r3, #8]
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <disk_read+0x3c>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	7a18      	ldrb	r0, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	47a0      	blx	r4
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000050 	.word	0x20000050

08003c4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <disk_write+0x3c>)
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	68dc      	ldr	r4, [r3, #12]
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <disk_write+0x3c>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	7a18      	ldrb	r0, [r3, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	47a0      	blx	r4
 8003c78:	4603      	mov	r3, r0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000050 	.word	0x20000050

08003c8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	603a      	str	r2, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <disk_ioctl+0x38>)
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	79fa      	ldrb	r2, [r7, #7]
 8003caa:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <disk_ioctl+0x38>)
 8003cac:	440a      	add	r2, r1
 8003cae:	7a10      	ldrb	r0, [r2, #8]
 8003cb0:	79b9      	ldrb	r1, [r7, #6]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4798      	blx	r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
  return res;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000050 	.word	0x20000050

08003cc8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	b21a      	sxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003cea:	89fb      	ldrh	r3, [r7, #14]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3303      	adds	r3, #3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	3202      	adds	r2, #2
 8003d10:	7812      	ldrb	r2, [r2, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	3201      	adds	r2, #1
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	7812      	ldrb	r2, [r2, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	617a      	str	r2, [r7, #20]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	1c51      	adds	r1, r2, #1
 8003df0:	6139      	str	r1, [r7, #16]
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f1      	bne.n	8003de6 <mem_cpy+0x1a>
	}
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	617a      	str	r2, [r7, #20]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f3      	bne.n	8003e1e <mem_set+0x10>
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003e42:	b480      	push	{r7}
 8003e44:	b089      	sub	sp, #36	; 0x24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	61fa      	str	r2, [r7, #28]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	61ba      	str	r2, [r7, #24]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	1acb      	subs	r3, r1, r3
 8003e6e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <mem_cmp+0x40>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0eb      	beq.n	8003e5a <mem_cmp+0x18>

	return r;
 8003e82:	697b      	ldr	r3, [r7, #20]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3724      	adds	r7, #36	; 0x24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003e9a:	e002      	b.n	8003ea2 <chk_chr+0x12>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <chk_chr+0x26>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d1f2      	bne.n	8003e9c <chk_chr+0xc>
	return *str;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e029      	b.n	8003f30 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003edc:	4a27      	ldr	r2, [pc, #156]	; (8003f7c <chk_lock+0xb4>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	4413      	add	r3, r2
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01d      	beq.n	8003f26 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003eea:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <chk_lock+0xb4>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d116      	bne.n	8003f2a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <chk_lock+0xb4>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10c      	bne.n	8003f2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003f10:	4a1a      	ldr	r2, [pc, #104]	; (8003f7c <chk_lock+0xb4>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	4413      	add	r3, r2
 8003f18:	3308      	adds	r3, #8
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d102      	bne.n	8003f2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003f24:	e007      	b.n	8003f36 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d9d2      	bls.n	8003edc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d109      	bne.n	8003f50 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <chk_lock+0x80>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d101      	bne.n	8003f4c <chk_lock+0x84>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e010      	b.n	8003f6e <chk_lock+0xa6>
 8003f4c:	2312      	movs	r3, #18
 8003f4e:	e00e      	b.n	8003f6e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <chk_lock+0xa0>
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <chk_lock+0xb4>)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	330c      	adds	r3, #12
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	d101      	bne.n	8003f6c <chk_lock+0xa4>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	e000      	b.n	8003f6e <chk_lock+0xa6>
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000030 	.word	0x20000030

08003f80 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	e002      	b.n	8003f92 <enq_lock+0x12>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d806      	bhi.n	8003fa6 <enq_lock+0x26>
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <enq_lock+0x40>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f2      	bne.n	8003f8c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000030 	.word	0x20000030

08003fc4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e01f      	b.n	8004014 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003fd4:	4a41      	ldr	r2, [pc, #260]	; (80040dc <inc_lock+0x118>)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	4413      	add	r3, r2
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d113      	bne.n	800400e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003fe6:	4a3d      	ldr	r2, [pc, #244]	; (80040dc <inc_lock+0x118>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d109      	bne.n	800400e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <inc_lock+0x118>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4413      	add	r3, r2
 8004002:	3308      	adds	r3, #8
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800400a:	429a      	cmp	r2, r3
 800400c:	d006      	beq.n	800401c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d9dc      	bls.n	8003fd4 <inc_lock+0x10>
 800401a:	e000      	b.n	800401e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800401c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d132      	bne.n	800408a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e002      	b.n	8004030 <inc_lock+0x6c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d806      	bhi.n	8004044 <inc_lock+0x80>
 8004036:	4a29      	ldr	r2, [pc, #164]	; (80040dc <inc_lock+0x118>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	4413      	add	r3, r2
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f2      	bne.n	800402a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d101      	bne.n	800404e <inc_lock+0x8a>
 800404a:	2300      	movs	r3, #0
 800404c:	e040      	b.n	80040d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4922      	ldr	r1, [pc, #136]	; (80040dc <inc_lock+0x118>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	440b      	add	r3, r1
 800405a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	491e      	ldr	r1, [pc, #120]	; (80040dc <inc_lock+0x118>)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	440b      	add	r3, r1
 8004068:	3304      	adds	r3, #4
 800406a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	491a      	ldr	r1, [pc, #104]	; (80040dc <inc_lock+0x118>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	440b      	add	r3, r1
 8004078:	3308      	adds	r3, #8
 800407a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <inc_lock+0x118>)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	330c      	adds	r3, #12
 8004086:	2200      	movs	r2, #0
 8004088:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <inc_lock+0xe0>
 8004090:	4a12      	ldr	r2, [pc, #72]	; (80040dc <inc_lock+0x118>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	4413      	add	r3, r2
 8004098:	330c      	adds	r3, #12
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <inc_lock+0xe0>
 80040a0:	2300      	movs	r3, #0
 80040a2:	e015      	b.n	80040d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <inc_lock+0xf8>
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <inc_lock+0x118>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	4413      	add	r3, r2
 80040b2:	330c      	adds	r3, #12
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	e001      	b.n	80040c0 <inc_lock+0xfc>
 80040bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c0:	4906      	ldr	r1, [pc, #24]	; (80040dc <inc_lock+0x118>)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	440b      	add	r3, r1
 80040c8:	330c      	adds	r3, #12
 80040ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	20000030 	.word	0x20000030

080040e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d825      	bhi.n	8004140 <dec_lock+0x60>
		n = Files[i].ctr;
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <dec_lock+0x74>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	4413      	add	r3, r2
 80040fc:	330c      	adds	r3, #12
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d101      	bne.n	800410e <dec_lock+0x2e>
 800410a:	2300      	movs	r3, #0
 800410c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800410e:	89fb      	ldrh	r3, [r7, #14]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <dec_lock+0x3a>
 8004114:	89fb      	ldrh	r3, [r7, #14]
 8004116:	3b01      	subs	r3, #1
 8004118:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800411a:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <dec_lock+0x74>)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	330c      	adds	r3, #12
 8004124:	89fa      	ldrh	r2, [r7, #14]
 8004126:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004128:	89fb      	ldrh	r3, [r7, #14]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <dec_lock+0x5a>
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <dec_lock+0x74>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	4413      	add	r3, r2
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	737b      	strb	r3, [r7, #13]
 800413e:	e001      	b.n	8004144 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004140:	2302      	movs	r3, #2
 8004142:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004144:	7b7b      	ldrb	r3, [r7, #13]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000030 	.word	0x20000030

08004158 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e010      	b.n	8004188 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004166:	4a0d      	ldr	r2, [pc, #52]	; (800419c <clear_lock+0x44>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	4413      	add	r3, r2
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d105      	bne.n	8004182 <clear_lock+0x2a>
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <clear_lock+0x44>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3301      	adds	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d9eb      	bls.n	8004166 <clear_lock+0xe>
	}
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000030 	.word	0x20000030

080041a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	78db      	ldrb	r3, [r3, #3]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d034      	beq.n	800421e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7858      	ldrb	r0, [r3, #1]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041c4:	2301      	movs	r3, #1
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	f7ff fd40 	bl	8003c4c <disk_write>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	e022      	b.n	800421e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	1ad2      	subs	r2, r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d217      	bcs.n	800421e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	789b      	ldrb	r3, [r3, #2]
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e010      	b.n	8004218 <sync_window+0x78>
					wsect += fs->fsize;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4413      	add	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7858      	ldrb	r0, [r3, #1]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800420a:	2301      	movs	r3, #1
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	f7ff fd1d 	bl	8003c4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3b01      	subs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d8eb      	bhi.n	80041f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d01b      	beq.n	8004278 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffad 	bl	80041a0 <sync_window>
 8004246:	4603      	mov	r3, r0
 8004248:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d113      	bne.n	8004278 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7858      	ldrb	r0, [r3, #1]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800425a:	2301      	movs	r3, #1
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	f7ff fcd5 	bl	8003c0c <disk_read>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
 800426c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff87 	bl	80041a0 <sync_window>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d159      	bne.n	8004350 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d149      	bne.n	8004338 <sync_fs+0xb4>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	791b      	ldrb	r3, [r3, #4]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d145      	bne.n	8004338 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	899b      	ldrh	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	2100      	movs	r1, #0
 80042ba:	f7ff fda8 	bl	8003e0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3334      	adds	r3, #52	; 0x34
 80042c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80042c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fd37 	bl	8003d3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3334      	adds	r3, #52	; 0x34
 80042d4:	4921      	ldr	r1, [pc, #132]	; (800435c <sync_fs+0xd8>)
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fd4c 	bl	8003d74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3334      	adds	r3, #52	; 0x34
 80042e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80042e4:	491e      	ldr	r1, [pc, #120]	; (8004360 <sync_fs+0xdc>)
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fd44 	bl	8003d74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3334      	adds	r3, #52	; 0x34
 80042f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f7ff fd3a 	bl	8003d74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3334      	adds	r3, #52	; 0x34
 8004304:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7ff fd30 	bl	8003d74 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7858      	ldrb	r0, [r3, #1]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800432c:	2301      	movs	r3, #1
 800432e:	f7ff fc8d 	bl	8003c4c <disk_write>
			fs->fsi_flag = 0;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2200      	movs	r2, #0
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fca3 	bl	8003c8c <disk_ioctl>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <sync_fs+0xcc>
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	41615252 	.word	0x41615252
 8004360:	61417272 	.word	0x61417272

08004364 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	3b02      	subs	r3, #2
 8004372:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	1e9a      	subs	r2, r3, #2
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d801      	bhi.n	8004384 <clust2sect+0x20>
 8004380:	2300      	movs	r3, #0
 8004382:	e008      	b.n	8004396 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	895b      	ldrh	r3, [r3, #10]
 8004388:	461a      	mov	r2, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	fb03 f202 	mul.w	r2, r3, r2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	4413      	add	r3, r2
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d904      	bls.n	80043c2 <get_fat+0x20>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d802      	bhi.n	80043c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80043c2:	2301      	movs	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e0b7      	b.n	8004538 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295
 80043cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d05a      	beq.n	800448c <get_fat+0xea>
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d07d      	beq.n	80044d6 <get_fat+0x134>
 80043da:	2b01      	cmp	r3, #1
 80043dc:	f040 80a2 	bne.w	8004524 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	899b      	ldrh	r3, [r3, #12]
 80043f6:	4619      	mov	r1, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80043fe:	4413      	add	r3, r2
 8004400:	4619      	mov	r1, r3
 8004402:	6938      	ldr	r0, [r7, #16]
 8004404:	f7ff ff10 	bl	8004228 <move_window>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 808d 	bne.w	800452a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	60fa      	str	r2, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	8992      	ldrh	r2, [r2, #12]
 800441a:	fbb3 f1f2 	udiv	r1, r3, r2
 800441e:	fb02 f201 	mul.w	r2, r2, r1
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800442c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	899b      	ldrh	r3, [r3, #12]
 8004436:	4619      	mov	r1, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	fbb3 f3f1 	udiv	r3, r3, r1
 800443e:	4413      	add	r3, r2
 8004440:	4619      	mov	r1, r3
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f7ff fef0 	bl	8004228 <move_window>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d16f      	bne.n	800452e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	899b      	ldrh	r3, [r3, #12]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	fbb3 f1f2 	udiv	r1, r3, r2
 800445a:	fb02 f201 	mul.w	r2, r2, r1
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	461a      	mov	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <get_fat+0xe0>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	e002      	b.n	8004488 <get_fat+0xe6>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004488:	617b      	str	r3, [r7, #20]
			break;
 800448a:	e055      	b.n	8004538 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	899b      	ldrh	r3, [r3, #12]
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a0:	4413      	add	r3, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6938      	ldr	r0, [r7, #16]
 80044a6:	f7ff febf 	bl	8004228 <move_window>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d140      	bne.n	8004532 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	8992      	ldrh	r2, [r2, #12]
 80044be:	fbb3 f0f2 	udiv	r0, r3, r2
 80044c2:	fb02 f200 	mul.w	r2, r2, r0
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	440b      	add	r3, r1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fbfc 	bl	8003cc8 <ld_word>
 80044d0:	4603      	mov	r3, r0
 80044d2:	617b      	str	r3, [r7, #20]
			break;
 80044d4:	e030      	b.n	8004538 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	899b      	ldrh	r3, [r3, #12]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	4619      	mov	r1, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ea:	4413      	add	r3, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	6938      	ldr	r0, [r7, #16]
 80044f0:	f7ff fe9a 	bl	8004228 <move_window>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d11d      	bne.n	8004536 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	8992      	ldrh	r2, [r2, #12]
 8004508:	fbb3 f0f2 	udiv	r0, r3, r2
 800450c:	fb02 f200 	mul.w	r2, r2, r0
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	440b      	add	r3, r1
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fbef 	bl	8003cf8 <ld_dword>
 800451a:	4603      	mov	r3, r0
 800451c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004520:	617b      	str	r3, [r7, #20]
			break;
 8004522:	e009      	b.n	8004538 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004524:	2301      	movs	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e006      	b.n	8004538 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800452a:	bf00      	nop
 800452c:	e004      	b.n	8004538 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800452e:	bf00      	nop
 8004530:	e002      	b.n	8004538 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004532:	bf00      	nop
 8004534:	e000      	b.n	8004538 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004536:	bf00      	nop
		}
	}

	return val;
 8004538:	697b      	ldr	r3, [r7, #20]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004542:	b590      	push	{r4, r7, lr}
 8004544:	b089      	sub	sp, #36	; 0x24
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800454e:	2302      	movs	r3, #2
 8004550:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	f240 8106 	bls.w	8004766 <put_fat+0x224>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	f240 8100 	bls.w	8004766 <put_fat+0x224>
		switch (fs->fs_type) {
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b02      	cmp	r3, #2
 800456c:	f000 8088 	beq.w	8004680 <put_fat+0x13e>
 8004570:	2b03      	cmp	r3, #3
 8004572:	f000 80b0 	beq.w	80046d6 <put_fat+0x194>
 8004576:	2b01      	cmp	r3, #1
 8004578:	f040 80f5 	bne.w	8004766 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4413      	add	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	899b      	ldrh	r3, [r3, #12]
 8004592:	4619      	mov	r1, r3
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	fbb3 f3f1 	udiv	r3, r3, r1
 800459a:	4413      	add	r3, r2
 800459c:	4619      	mov	r1, r3
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fe42 	bl	8004228 <move_window>
 80045a4:	4603      	mov	r3, r0
 80045a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 80d4 	bne.w	8004758 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	61ba      	str	r2, [r7, #24]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	8992      	ldrh	r2, [r2, #12]
 80045c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80045c4:	fb02 f200 	mul.w	r2, r2, r0
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	440b      	add	r3, r1
 80045cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <put_fat+0xb2>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	b25a      	sxtb	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	4313      	orrs	r3, r2
 80045ee:	b25b      	sxtb	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e001      	b.n	80045f8 <put_fat+0xb6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	899b      	ldrh	r3, [r3, #12]
 800460a:	4619      	mov	r1, r3
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004612:	4413      	add	r3, r2
 8004614:	4619      	mov	r1, r3
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff fe06 	bl	8004228 <move_window>
 800461c:	4603      	mov	r3, r0
 800461e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004620:	7ffb      	ldrb	r3, [r7, #31]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 809a 	bne.w	800475c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	899b      	ldrh	r3, [r3, #12]
 8004632:	461a      	mov	r2, r3
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	fbb3 f0f2 	udiv	r0, r3, r2
 800463a:	fb02 f200 	mul.w	r2, r2, r0
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	440b      	add	r3, r1
 8004642:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <put_fat+0x114>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e00e      	b.n	8004674 <put_fat+0x132>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f023 030f 	bic.w	r3, r3, #15
 8004660:	b25a      	sxtb	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	b25b      	sxtb	r3, r3
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	b25b      	sxtb	r3, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	b25b      	sxtb	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	70da      	strb	r2, [r3, #3]
			break;
 800467e:	e072      	b.n	8004766 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	899b      	ldrh	r3, [r3, #12]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	fbb3 f3f1 	udiv	r3, r3, r1
 8004694:	4413      	add	r3, r2
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff fdc5 	bl	8004228 <move_window>
 800469e:	4603      	mov	r3, r0
 80046a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046a2:	7ffb      	ldrb	r3, [r7, #31]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d15b      	bne.n	8004760 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	8992      	ldrh	r2, [r2, #12]
 80046b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80046ba:	fb02 f200 	mul.w	r2, r2, r0
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	440b      	add	r3, r1
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	b292      	uxth	r2, r2
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fb38 	bl	8003d3e <st_word>
			fs->wflag = 1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	70da      	strb	r2, [r3, #3]
			break;
 80046d4:	e047      	b.n	8004766 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	899b      	ldrh	r3, [r3, #12]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4619      	mov	r1, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ea:	4413      	add	r3, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff fd9a 	bl	8004228 <move_window>
 80046f4:	4603      	mov	r3, r0
 80046f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046f8:	7ffb      	ldrb	r3, [r7, #31]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d132      	bne.n	8004764 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	8992      	ldrh	r2, [r2, #12]
 8004712:	fbb3 f0f2 	udiv	r0, r3, r2
 8004716:	fb02 f200 	mul.w	r2, r2, r0
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	440b      	add	r3, r1
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff faea 	bl	8003cf8 <ld_dword>
 8004724:	4603      	mov	r3, r0
 8004726:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800472a:	4323      	orrs	r3, r4
 800472c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	8992      	ldrh	r2, [r2, #12]
 800473c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004740:	fb02 f200 	mul.w	r2, r2, r0
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	440b      	add	r3, r1
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fb12 	bl	8003d74 <st_dword>
			fs->wflag = 1;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	70da      	strb	r2, [r3, #3]
			break;
 8004756:	e006      	b.n	8004766 <put_fat+0x224>
			if (res != FR_OK) break;
 8004758:	bf00      	nop
 800475a:	e004      	b.n	8004766 <put_fat+0x224>
			if (res != FR_OK) break;
 800475c:	bf00      	nop
 800475e:	e002      	b.n	8004766 <put_fat+0x224>
			if (res != FR_OK) break;
 8004760:	bf00      	nop
 8004762:	e000      	b.n	8004766 <put_fat+0x224>
			if (res != FR_OK) break;
 8004764:	bf00      	nop
		}
	}
	return res;
 8004766:	7ffb      	ldrb	r3, [r7, #31]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3724      	adds	r7, #36	; 0x24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd90      	pop	{r4, r7, pc}

08004770 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d904      	bls.n	8004796 <remove_chain+0x26>
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d801      	bhi.n	800479a <remove_chain+0x2a>
 8004796:	2302      	movs	r3, #2
 8004798:	e04b      	b.n	8004832 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	69b8      	ldr	r0, [r7, #24]
 80047a8:	f7ff fecb 	bl	8004542 <put_fat>
 80047ac:	4603      	mov	r3, r0
 80047ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80047b0:	7ffb      	ldrb	r3, [r7, #31]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <remove_chain+0x4a>
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	e03b      	b.n	8004832 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff fdf0 	bl	80043a2 <get_fat>
 80047c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d031      	beq.n	800482e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <remove_chain+0x64>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e02e      	b.n	8004832 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d101      	bne.n	80047e0 <remove_chain+0x70>
 80047dc:	2301      	movs	r3, #1
 80047de:	e028      	b.n	8004832 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80047e0:	2200      	movs	r2, #0
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	69b8      	ldr	r0, [r7, #24]
 80047e6:	f7ff feac 	bl	8004542 <put_fat>
 80047ea:	4603      	mov	r3, r0
 80047ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80047ee:	7ffb      	ldrb	r3, [r7, #31]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <remove_chain+0x88>
 80047f4:	7ffb      	ldrb	r3, [r7, #31]
 80047f6:	e01c      	b.n	8004832 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	3b02      	subs	r3, #2
 8004802:	429a      	cmp	r2, r3
 8004804:	d20b      	bcs.n	800481e <remove_chain+0xae>
			fs->free_clst++;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	791b      	ldrb	r3, [r3, #4]
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	b2da      	uxtb	r2, r3
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d8c6      	bhi.n	80047ba <remove_chain+0x4a>
 800482c:	e000      	b.n	8004830 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800482e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3720      	adds	r7, #32
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b088      	sub	sp, #32
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10d      	bne.n	800486c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <create_chain+0x2c>
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	429a      	cmp	r2, r3
 8004864:	d81b      	bhi.n	800489e <create_chain+0x64>
 8004866:	2301      	movs	r3, #1
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e018      	b.n	800489e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fd97 	bl	80043a2 <get_fat>
 8004874:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d801      	bhi.n	8004880 <create_chain+0x46>
 800487c:	2301      	movs	r3, #1
 800487e:	e070      	b.n	8004962 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d101      	bne.n	800488c <create_chain+0x52>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	e06a      	b.n	8004962 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	429a      	cmp	r2, r3
 8004894:	d901      	bls.n	800489a <create_chain+0x60>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	e063      	b.n	8004962 <create_chain+0x128>
		scl = clst;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3301      	adds	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d807      	bhi.n	80048c2 <create_chain+0x88>
				ncl = 2;
 80048b2:	2302      	movs	r3, #2
 80048b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d901      	bls.n	80048c2 <create_chain+0x88>
 80048be:	2300      	movs	r3, #0
 80048c0:	e04f      	b.n	8004962 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80048c2:	69f9      	ldr	r1, [r7, #28]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fd6c 	bl	80043a2 <get_fat>
 80048ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00e      	beq.n	80048f0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d003      	beq.n	80048e0 <create_chain+0xa6>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d101      	bne.n	80048e4 <create_chain+0xaa>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	e03e      	b.n	8004962 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d1da      	bne.n	80048a2 <create_chain+0x68>
 80048ec:	2300      	movs	r3, #0
 80048ee:	e038      	b.n	8004962 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80048f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295
 80048f6:	69f9      	ldr	r1, [r7, #28]
 80048f8:	6938      	ldr	r0, [r7, #16]
 80048fa:	f7ff fe22 	bl	8004542 <put_fat>
 80048fe:	4603      	mov	r3, r0
 8004900:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <create_chain+0xe2>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f7ff fe15 	bl	8004542 <put_fat>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d116      	bne.n	8004950 <create_chain+0x116>
		fs->last_clst = ncl;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	3b02      	subs	r3, #2
 8004932:	429a      	cmp	r2, r3
 8004934:	d804      	bhi.n	8004940 <create_chain+0x106>
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	b2da      	uxtb	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	711a      	strb	r2, [r3, #4]
 800494e:	e007      	b.n	8004960 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d102      	bne.n	800495c <create_chain+0x122>
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
 800495a:	e000      	b.n	800495e <create_chain+0x124>
 800495c:	2301      	movs	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004960:	69fb      	ldr	r3, [r7, #28]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	3304      	adds	r3, #4
 8004980:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	899b      	ldrh	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	fbb3 f3f2 	udiv	r3, r3, r2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	8952      	ldrh	r2, [r2, #10]
 8004992:	fbb3 f3f2 	udiv	r3, r3, r2
 8004996:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1d1a      	adds	r2, r3, #4
 800499c:	613a      	str	r2, [r7, #16]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <clmt_clust+0x42>
 80049a8:	2300      	movs	r3, #0
 80049aa:	e010      	b.n	80049ce <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d307      	bcc.n	80049c4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3304      	adds	r3, #4
 80049c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80049c2:	e7e9      	b.n	8004998 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80049c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	4413      	add	r3, r2
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f0:	d204      	bcs.n	80049fc <dir_sdi+0x22>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <dir_sdi+0x26>
		return FR_INT_ERR;
 80049fc:	2302      	movs	r3, #2
 80049fe:	e071      	b.n	8004ae4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <dir_sdi+0x46>
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10c      	bne.n	8004a40 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	8912      	ldrh	r2, [r2, #8]
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d301      	bcc.n	8004a36 <dir_sdi+0x5c>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e056      	b.n	8004ae4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	61da      	str	r2, [r3, #28]
 8004a3e:	e02d      	b.n	8004a9c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	895b      	ldrh	r3, [r3, #10]
 8004a44:	461a      	mov	r2, r3
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	899b      	ldrh	r3, [r3, #12]
 8004a4a:	fb03 f302 	mul.w	r3, r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a50:	e019      	b.n	8004a86 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fca3 	bl	80043a2 <get_fat>
 8004a5c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d101      	bne.n	8004a6a <dir_sdi+0x90>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e03c      	b.n	8004ae4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d904      	bls.n	8004a7a <dir_sdi+0xa0>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d801      	bhi.n	8004a7e <dir_sdi+0xa4>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e032      	b.n	8004ae4 <dir_sdi+0x10a>
			ofs -= csz;
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d2e1      	bcs.n	8004a52 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004a8e:	6979      	ldr	r1, [r7, #20]
 8004a90:	6938      	ldr	r0, [r7, #16]
 8004a92:	f7ff fc67 	bl	8004364 <clust2sect>
 8004a96:	4602      	mov	r2, r0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <dir_sdi+0xd4>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e01a      	b.n	8004ae4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	899b      	ldrh	r3, [r3, #12]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8004abe:	441a      	add	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	899b      	ldrh	r3, [r3, #12]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ad6:	fb02 f200 	mul.w	r2, r2, r0
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	18ca      	adds	r2, r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	3320      	adds	r3, #32
 8004b02:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <dir_next+0x28>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b12:	d301      	bcc.n	8004b18 <dir_next+0x2c>
 8004b14:	2304      	movs	r3, #4
 8004b16:	e0bb      	b.n	8004c90 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	899b      	ldrh	r3, [r3, #12]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b24:	fb02 f201 	mul.w	r2, r2, r1
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 809d 	bne.w	8004c6a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	8912      	ldrh	r2, [r2, #8]
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f0c0 808d 	bcc.w	8004c6a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
 8004b56:	2304      	movs	r3, #4
 8004b58:	e09a      	b.n	8004c90 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	899b      	ldrh	r3, [r3, #12]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	8952      	ldrh	r2, [r2, #10]
 8004b6a:	3a01      	subs	r2, #1
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d17b      	bne.n	8004c6a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f7ff fc11 	bl	80043a2 <get_fat>
 8004b80:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d801      	bhi.n	8004b8c <dir_next+0xa0>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e081      	b.n	8004c90 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d101      	bne.n	8004b98 <dir_next+0xac>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e07b      	b.n	8004c90 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	699a      	ldr	r2, [r3, #24]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d859      	bhi.n	8004c56 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	61da      	str	r2, [r3, #28]
 8004bae:	2304      	movs	r3, #4
 8004bb0:	e06e      	b.n	8004c90 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7ff fe3d 	bl	800483a <create_chain>
 8004bc0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <dir_next+0xe0>
 8004bc8:	2307      	movs	r3, #7
 8004bca:	e061      	b.n	8004c90 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <dir_next+0xea>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e05c      	b.n	8004c90 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d101      	bne.n	8004be2 <dir_next+0xf6>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e056      	b.n	8004c90 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff fadc 	bl	80041a0 <sync_window>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <dir_next+0x106>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e04e      	b.n	8004c90 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	899b      	ldrh	r3, [r3, #12]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2100      	movs	r1, #0
 8004c00:	f7ff f905 	bl	8003e0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	6979      	ldr	r1, [r7, #20]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fbaa 	bl	8004364 <clust2sect>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
 8004c16:	e012      	b.n	8004c3e <dir_next+0x152>
						fs->wflag = 1;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff fabe 	bl	80041a0 <sync_window>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <dir_next+0x142>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e030      	b.n	8004c90 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3301      	adds	r3, #1
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	895b      	ldrh	r3, [r3, #10]
 8004c42:	461a      	mov	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d8e6      	bhi.n	8004c18 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad2      	subs	r2, r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004c5c:	6979      	ldr	r1, [r7, #20]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff fb80 	bl	8004364 <clust2sect>
 8004c64:	4602      	mov	r2, r0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	899b      	ldrh	r3, [r3, #12]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c82:	fb02 f200 	mul.w	r2, r2, r0
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	18ca      	adds	r2, r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff fe95 	bl	80049da <dir_sdi>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d12b      	bne.n	8004d12 <dir_alloc+0x7a>
		n = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff faaf 	bl	8004228 <move_window>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11d      	bne.n	8004d10 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2be5      	cmp	r3, #229	; 0xe5
 8004cdc:	d004      	beq.n	8004ce8 <dir_alloc+0x50>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	3301      	adds	r3, #1
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d102      	bne.n	8004cfc <dir_alloc+0x64>
 8004cf6:	e00c      	b.n	8004d12 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff fef4 	bl	8004aec <dir_next>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0d7      	beq.n	8004cbe <dir_alloc+0x26>
 8004d0e:	e000      	b.n	8004d12 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004d10:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d101      	bne.n	8004d1c <dir_alloc+0x84>
 8004d18:	2307      	movs	r3, #7
 8004d1a:	75fb      	strb	r3, [r7, #23]
	return res;
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	331a      	adds	r3, #26
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe ffc7 	bl	8003cc8 <ld_word>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d109      	bne.n	8004d5a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe ffbc 	bl	8003cc8 <ld_word>
 8004d50:	4603      	mov	r3, r0
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	331a      	adds	r3, #26
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	b292      	uxth	r2, r2
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe ffdf 	bl	8003d3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d109      	bne.n	8004d9c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f103 0214 	add.w	r2, r3, #20
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fe ffd1 	bl	8003d3e <st_word>
	}
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004db2:	2100      	movs	r1, #0
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fe10 	bl	80049da <dir_sdi>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <dir_find+0x24>
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	e03e      	b.n	8004e46 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6938      	ldr	r0, [r7, #16]
 8004dd0:	f7ff fa2a 	bl	8004228 <move_window>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d12f      	bne.n	8004e3e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <dir_find+0x4e>
 8004dec:	2304      	movs	r3, #4
 8004dee:	75fb      	strb	r3, [r7, #23]
 8004df0:	e028      	b.n	8004e44 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	330b      	adds	r3, #11
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	330b      	adds	r3, #11
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <dir_find+0x86>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a18      	ldr	r0, [r3, #32]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	220b      	movs	r2, #11
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f7ff f80f 	bl	8003e42 <mem_cmp>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fe5d 	bl	8004aec <dir_next>
 8004e32:	4603      	mov	r3, r0
 8004e34:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0c5      	beq.n	8004dc8 <dir_find+0x24>
 8004e3c:	e002      	b.n	8004e44 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004e42:	bf00      	nop

	return res;
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff ff1a 	bl	8004c98 <dir_alloc>
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11c      	bne.n	8004ea8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4619      	mov	r1, r3
 8004e74:	68b8      	ldr	r0, [r7, #8]
 8004e76:	f7ff f9d7 	bl	8004228 <move_window>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d111      	bne.n	8004ea8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe ffbe 	bl	8003e0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a18      	ldr	r0, [r3, #32]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	220b      	movs	r2, #11
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f7fe ff95 	bl	8003dcc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3324      	adds	r3, #36	; 0x24
 8004ec8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004eca:	220b      	movs	r2, #11
 8004ecc:	2120      	movs	r1, #32
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	f7fe ff9d 	bl	8003e0e <mem_set>
	si = i = 0; ni = 8;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	2308      	movs	r3, #8
 8004ede:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	617a      	str	r2, [r7, #20]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004eee:	7ffb      	ldrb	r3, [r7, #31]
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d94e      	bls.n	8004f92 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
 8004ef6:	2b2f      	cmp	r3, #47	; 0x2f
 8004ef8:	d006      	beq.n	8004f08 <create_name+0x54>
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	2b5c      	cmp	r3, #92	; 0x5c
 8004efe:	d110      	bne.n	8004f22 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004f00:	e002      	b.n	8004f08 <create_name+0x54>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	3301      	adds	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b2f      	cmp	r3, #47	; 0x2f
 8004f12:	d0f6      	beq.n	8004f02 <create_name+0x4e>
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b5c      	cmp	r3, #92	; 0x5c
 8004f1e:	d0f0      	beq.n	8004f02 <create_name+0x4e>
			break;
 8004f20:	e038      	b.n	8004f94 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b2e      	cmp	r3, #46	; 0x2e
 8004f26:	d003      	beq.n	8004f30 <create_name+0x7c>
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d30c      	bcc.n	8004f4a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b0b      	cmp	r3, #11
 8004f34:	d002      	beq.n	8004f3c <create_name+0x88>
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b2e      	cmp	r3, #46	; 0x2e
 8004f3a:	d001      	beq.n	8004f40 <create_name+0x8c>
 8004f3c:	2306      	movs	r3, #6
 8004f3e:	e044      	b.n	8004fca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004f40:	2308      	movs	r3, #8
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	230b      	movs	r3, #11
 8004f46:	61bb      	str	r3, [r7, #24]
			continue;
 8004f48:	e022      	b.n	8004f90 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004f4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da04      	bge.n	8004f5c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004f52:	7ffb      	ldrb	r3, [r7, #31]
 8004f54:	3b80      	subs	r3, #128	; 0x80
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <create_name+0x120>)
 8004f58:	5cd3      	ldrb	r3, [r2, r3]
 8004f5a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004f5c:	7ffb      	ldrb	r3, [r7, #31]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	481d      	ldr	r0, [pc, #116]	; (8004fd8 <create_name+0x124>)
 8004f62:	f7fe ff95 	bl	8003e90 <chk_chr>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <create_name+0xbc>
 8004f6c:	2306      	movs	r3, #6
 8004f6e:	e02c      	b.n	8004fca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004f70:	7ffb      	ldrb	r3, [r7, #31]
 8004f72:	2b60      	cmp	r3, #96	; 0x60
 8004f74:	d905      	bls.n	8004f82 <create_name+0xce>
 8004f76:	7ffb      	ldrb	r3, [r7, #31]
 8004f78:	2b7a      	cmp	r3, #122	; 0x7a
 8004f7a:	d802      	bhi.n	8004f82 <create_name+0xce>
 8004f7c:	7ffb      	ldrb	r3, [r7, #31]
 8004f7e:	3b20      	subs	r3, #32
 8004f80:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	613a      	str	r2, [r7, #16]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	7ffa      	ldrb	r2, [r7, #31]
 8004f8e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004f90:	e7a6      	b.n	8004ee0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004f92:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	441a      	add	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <create_name+0xf4>
 8004fa4:	2306      	movs	r3, #6
 8004fa6:	e010      	b.n	8004fca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2be5      	cmp	r3, #229	; 0xe5
 8004fae:	d102      	bne.n	8004fb6 <create_name+0x102>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	330b      	adds	r3, #11
 8004fba:	7ffa      	ldrb	r2, [r7, #31]
 8004fbc:	2a20      	cmp	r2, #32
 8004fbe:	d801      	bhi.n	8004fc4 <create_name+0x110>
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	e000      	b.n	8004fc6 <create_name+0x112>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004fc8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08006c70 	.word	0x08006c70
 8004fd8:	08006bc8 	.word	0x08006bc8

08004fdc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004ff0:	e002      	b.n	8004ff8 <follow_path+0x1c>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b2f      	cmp	r3, #47	; 0x2f
 8004ffe:	d0f8      	beq.n	8004ff2 <follow_path+0x16>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b5c      	cmp	r3, #92	; 0x5c
 8005006:	d0f4      	beq.n	8004ff2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b1f      	cmp	r3, #31
 8005014:	d80a      	bhi.n	800502c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800501e:	2100      	movs	r1, #0
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff fcda 	bl	80049da <dir_sdi>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]
 800502a:	e048      	b.n	80050be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800502c:	463b      	mov	r3, r7
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff3f 	bl	8004eb4 <create_name>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d139      	bne.n	80050b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff feaf 	bl	8004da4 <dir_find>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005050:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d12c      	bne.n	80050b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d127      	bne.n	80050b8 <follow_path+0xdc>
 8005068:	2305      	movs	r3, #5
 800506a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800506c:	e024      	b.n	80050b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800506e:	7afb      	ldrb	r3, [r7, #11]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d121      	bne.n	80050bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	799b      	ldrb	r3, [r3, #6]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005084:	2305      	movs	r3, #5
 8005086:	75fb      	strb	r3, [r7, #23]
 8005088:	e019      	b.n	80050be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	8992      	ldrh	r2, [r2, #12]
 8005098:	fbb3 f0f2 	udiv	r0, r3, r2
 800509c:	fb02 f200 	mul.w	r2, r2, r0
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	4619      	mov	r1, r3
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff fe3d 	bl	8004d26 <ld_clust>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80050b2:	e7bb      	b.n	800502c <follow_path+0x50>
			if (res != FR_OK) break;
 80050b4:	bf00      	nop
 80050b6:	e002      	b.n	80050be <follow_path+0xe2>
				break;
 80050b8:	bf00      	nop
 80050ba:	e000      	b.n	80050be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050bc:	bf00      	nop
			}
		}
	}

	return res;
 80050be:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295
 80050d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d031      	beq.n	8005142 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e002      	b.n	80050ec <get_ldnumber+0x24>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	3301      	adds	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d903      	bls.n	80050fc <get_ldnumber+0x34>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b3a      	cmp	r3, #58	; 0x3a
 80050fa:	d1f4      	bne.n	80050e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b3a      	cmp	r3, #58	; 0x3a
 8005102:	d11c      	bne.n	800513e <get_ldnumber+0x76>
			tp = *path;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	60fa      	str	r2, [r7, #12]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	3b30      	subs	r3, #48	; 0x30
 8005114:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b09      	cmp	r3, #9
 800511a:	d80e      	bhi.n	800513a <get_ldnumber+0x72>
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	429a      	cmp	r2, r3
 8005122:	d10a      	bne.n	800513a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d107      	bne.n	800513a <get_ldnumber+0x72>
					vol = (int)i;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3301      	adds	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	e002      	b.n	8005144 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005142:	693b      	ldr	r3, [r7, #16]
}
 8005144:	4618      	mov	r0, r3
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	70da      	strb	r2, [r3, #3]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f04f 32ff 	mov.w	r2, #4294967295
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff f85c 	bl	8004228 <move_window>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <check_fs+0x2a>
 8005176:	2304      	movs	r3, #4
 8005178:	e038      	b.n	80051ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3334      	adds	r3, #52	; 0x34
 800517e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe fda0 	bl	8003cc8 <ld_word>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <check_fs+0x48>
 8005194:	2303      	movs	r3, #3
 8005196:	e029      	b.n	80051ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800519e:	2be9      	cmp	r3, #233	; 0xe9
 80051a0:	d009      	beq.n	80051b6 <check_fs+0x66>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051a8:	2beb      	cmp	r3, #235	; 0xeb
 80051aa:	d11e      	bne.n	80051ea <check_fs+0x9a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80051b2:	2b90      	cmp	r3, #144	; 0x90
 80051b4:	d119      	bne.n	80051ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3334      	adds	r3, #52	; 0x34
 80051ba:	3336      	adds	r3, #54	; 0x36
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fd9b 	bl	8003cf8 <ld_dword>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051c8:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <check_fs+0xa4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <check_fs+0x82>
 80051ce:	2300      	movs	r3, #0
 80051d0:	e00c      	b.n	80051ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3334      	adds	r3, #52	; 0x34
 80051d6:	3352      	adds	r3, #82	; 0x52
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fd8d 	bl	8003cf8 <ld_dword>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <check_fs+0xa8>)
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d101      	bne.n	80051ea <check_fs+0x9a>
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80051ea:	2302      	movs	r3, #2
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	00544146 	.word	0x00544146
 80051f8:	33544146 	.word	0x33544146

080051fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b096      	sub	sp, #88	; 0x58
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff ff59 	bl	80050c8 <get_ldnumber>
 8005216:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521a:	2b00      	cmp	r3, #0
 800521c:	da01      	bge.n	8005222 <find_volume+0x26>
 800521e:	230b      	movs	r3, #11
 8005220:	e265      	b.n	80056ee <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005222:	4ab0      	ldr	r2, [pc, #704]	; (80054e4 <find_volume+0x2e8>)
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <find_volume+0x3a>
 8005232:	230c      	movs	r3, #12
 8005234:	e25b      	b.n	80056ee <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800523a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01a      	beq.n	8005282 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe fc9b 	bl	8003b8c <disk_status>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800525c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10c      	bne.n	8005282 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <find_volume+0x82>
 800526e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800527a:	230a      	movs	r3, #10
 800527c:	e237      	b.n	80056ee <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800527e:	2300      	movs	r3, #0
 8005280:	e235      	b.n	80056ee <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe fc93 	bl	8003bc0 <disk_initialize>
 800529a:	4603      	mov	r3, r0
 800529c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80052a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80052ac:	2303      	movs	r3, #3
 80052ae:	e21e      	b.n	80056ee <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <find_volume+0xca>
 80052b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80052c2:	230a      	movs	r3, #10
 80052c4:	e213      	b.n	80056ee <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	7858      	ldrb	r0, [r3, #1]
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	330c      	adds	r3, #12
 80052ce:	461a      	mov	r2, r3
 80052d0:	2102      	movs	r1, #2
 80052d2:	f7fe fcdb 	bl	8003c8c <disk_ioctl>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <find_volume+0xe4>
 80052dc:	2301      	movs	r3, #1
 80052de:	e206      	b.n	80056ee <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	899b      	ldrh	r3, [r3, #12]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d80d      	bhi.n	8005306 <find_volume+0x10a>
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	899b      	ldrh	r3, [r3, #12]
 80052ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f2:	d308      	bcc.n	8005306 <find_volume+0x10a>
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	899b      	ldrh	r3, [r3, #12]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	899b      	ldrh	r3, [r3, #12]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <find_volume+0x10e>
 8005306:	2301      	movs	r3, #1
 8005308:	e1f1      	b.n	80056ee <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800530e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005312:	f7ff ff1d 	bl	8005150 <check_fs>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800531c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005320:	2b02      	cmp	r3, #2
 8005322:	d14b      	bne.n	80053bc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005324:	2300      	movs	r3, #0
 8005326:	643b      	str	r3, [r7, #64]	; 0x40
 8005328:	e01f      	b.n	800536a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005338:	4413      	add	r3, r2
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	3304      	adds	r3, #4
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <find_volume+0x158>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	3308      	adds	r3, #8
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fcd4 	bl	8003cf8 <ld_dword>
 8005350:	4602      	mov	r2, r0
 8005352:	e000      	b.n	8005356 <find_volume+0x15a>
 8005354:	2200      	movs	r2, #0
 8005356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800535e:	440b      	add	r3, r1
 8005360:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005366:	3301      	adds	r3, #1
 8005368:	643b      	str	r3, [r7, #64]	; 0x40
 800536a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536c:	2b03      	cmp	r3, #3
 800536e:	d9dc      	bls.n	800532a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005370:	2300      	movs	r3, #0
 8005372:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <find_volume+0x184>
 800537a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537c:	3b01      	subs	r3, #1
 800537e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005388:	4413      	add	r3, r2
 800538a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800538e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <find_volume+0x1a6>
 8005396:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800539a:	f7ff fed9 	bl	8005150 <check_fs>
 800539e:	4603      	mov	r3, r0
 80053a0:	e000      	b.n	80053a4 <find_volume+0x1a8>
 80053a2:	2303      	movs	r3, #3
 80053a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80053a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d905      	bls.n	80053bc <find_volume+0x1c0>
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	3301      	adds	r3, #1
 80053b4:	643b      	str	r3, [r7, #64]	; 0x40
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d9e1      	bls.n	8005380 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80053bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d101      	bne.n	80053c8 <find_volume+0x1cc>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e192      	b.n	80056ee <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80053c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d901      	bls.n	80053d4 <find_volume+0x1d8>
 80053d0:	230d      	movs	r3, #13
 80053d2:	e18c      	b.n	80056ee <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	3334      	adds	r3, #52	; 0x34
 80053d8:	330b      	adds	r3, #11
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fc74 	bl	8003cc8 <ld_word>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	899b      	ldrh	r3, [r3, #12]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <find_volume+0x1f4>
 80053ec:	230d      	movs	r3, #13
 80053ee:	e17e      	b.n	80056ee <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	3334      	adds	r3, #52	; 0x34
 80053f4:	3316      	adds	r3, #22
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe fc66 	bl	8003cc8 <ld_word>
 80053fc:	4603      	mov	r3, r0
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <find_volume+0x218>
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	3334      	adds	r3, #52	; 0x34
 800540a:	3324      	adds	r3, #36	; 0x24
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe fc73 	bl	8003cf8 <ld_dword>
 8005412:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005418:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	789b      	ldrb	r3, [r3, #2]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d005      	beq.n	8005438 <find_volume+0x23c>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	789b      	ldrb	r3, [r3, #2]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d001      	beq.n	8005438 <find_volume+0x23c>
 8005434:	230d      	movs	r3, #13
 8005436:	e15a      	b.n	80056ee <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	789b      	ldrb	r3, [r3, #2]
 800543c:	461a      	mov	r2, r3
 800543e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544c:	b29a      	uxth	r2, r3
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	895b      	ldrh	r3, [r3, #10]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <find_volume+0x270>
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	895b      	ldrh	r3, [r3, #10]
 800545e:	461a      	mov	r2, r3
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	895b      	ldrh	r3, [r3, #10]
 8005464:	3b01      	subs	r3, #1
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <find_volume+0x274>
 800546c:	230d      	movs	r3, #13
 800546e:	e13e      	b.n	80056ee <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	3334      	adds	r3, #52	; 0x34
 8005474:	3311      	adds	r3, #17
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fc26 	bl	8003cc8 <ld_word>
 800547c:	4603      	mov	r3, r0
 800547e:	461a      	mov	r2, r3
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	891b      	ldrh	r3, [r3, #8]
 8005488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800548a:	8992      	ldrh	r2, [r2, #12]
 800548c:	0952      	lsrs	r2, r2, #5
 800548e:	b292      	uxth	r2, r2
 8005490:	fbb3 f1f2 	udiv	r1, r3, r2
 8005494:	fb02 f201 	mul.w	r2, r2, r1
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <find_volume+0x2a8>
 80054a0:	230d      	movs	r3, #13
 80054a2:	e124      	b.n	80056ee <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	3334      	adds	r3, #52	; 0x34
 80054a8:	3313      	adds	r3, #19
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fc0c 	bl	8003cc8 <ld_word>
 80054b0:	4603      	mov	r3, r0
 80054b2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80054b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <find_volume+0x2cc>
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	3334      	adds	r3, #52	; 0x34
 80054be:	3320      	adds	r3, #32
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fc19 	bl	8003cf8 <ld_dword>
 80054c6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	3334      	adds	r3, #52	; 0x34
 80054cc:	330e      	adds	r3, #14
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fbfa 	bl	8003cc8 <ld_word>
 80054d4:	4603      	mov	r3, r0
 80054d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80054d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <find_volume+0x2ec>
 80054de:	230d      	movs	r3, #13
 80054e0:	e105      	b.n	80056ee <find_volume+0x4f2>
 80054e2:	bf00      	nop
 80054e4:	20000028 	.word	0x20000028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80054e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ec:	4413      	add	r3, r2
 80054ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f0:	8911      	ldrh	r1, [r2, #8]
 80054f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f4:	8992      	ldrh	r2, [r2, #12]
 80054f6:	0952      	lsrs	r2, r2, #5
 80054f8:	b292      	uxth	r2, r2
 80054fa:	fbb1 f2f2 	udiv	r2, r1, r2
 80054fe:	b292      	uxth	r2, r2
 8005500:	4413      	add	r3, r2
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	429a      	cmp	r2, r3
 800550a:	d201      	bcs.n	8005510 <find_volume+0x314>
 800550c:	230d      	movs	r3, #13
 800550e:	e0ee      	b.n	80056ee <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005518:	8952      	ldrh	r2, [r2, #10]
 800551a:	fbb3 f3f2 	udiv	r3, r3, r2
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <find_volume+0x32e>
 8005526:	230d      	movs	r3, #13
 8005528:	e0e1      	b.n	80056ee <find_volume+0x4f2>
		fmt = FS_FAT32;
 800552a:	2303      	movs	r3, #3
 800552c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005536:	4293      	cmp	r3, r2
 8005538:	d802      	bhi.n	8005540 <find_volume+0x344>
 800553a:	2302      	movs	r3, #2
 800553c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005546:	4293      	cmp	r3, r2
 8005548:	d802      	bhi.n	8005550 <find_volume+0x354>
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1c9a      	adds	r2, r3, #2
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800555c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800555e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005562:	441a      	add	r2, r3
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	441a      	add	r2, r3
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005576:	2b03      	cmp	r3, #3
 8005578:	d11e      	bne.n	80055b8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	3334      	adds	r3, #52	; 0x34
 800557e:	332a      	adds	r3, #42	; 0x2a
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe fba1 	bl	8003cc8 <ld_word>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <find_volume+0x394>
 800558c:	230d      	movs	r3, #13
 800558e:	e0ae      	b.n	80056ee <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	891b      	ldrh	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <find_volume+0x3a0>
 8005598:	230d      	movs	r3, #13
 800559a:	e0a8      	b.n	80056ee <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	3334      	adds	r3, #52	; 0x34
 80055a0:	332c      	adds	r3, #44	; 0x2c
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fba8 	bl	8003cf8 <ld_dword>
 80055a8:	4602      	mov	r2, r0
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	647b      	str	r3, [r7, #68]	; 0x44
 80055b6:	e01f      	b.n	80055f8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	891b      	ldrh	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <find_volume+0x3c8>
 80055c0:	230d      	movs	r3, #13
 80055c2:	e094      	b.n	80056ee <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ca:	441a      	add	r2, r3
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80055d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d103      	bne.n	80055e0 <find_volume+0x3e4>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	e00a      	b.n	80055f6 <find_volume+0x3fa>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	4613      	mov	r3, r2
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	4413      	add	r3, r2
 80055ea:	085a      	lsrs	r2, r3, #1
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80055f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	899b      	ldrh	r3, [r3, #12]
 8005600:	4619      	mov	r1, r3
 8005602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005604:	440b      	add	r3, r1
 8005606:	3b01      	subs	r3, #1
 8005608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800560a:	8989      	ldrh	r1, [r1, #12]
 800560c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005610:	429a      	cmp	r2, r3
 8005612:	d201      	bcs.n	8005618 <find_volume+0x41c>
 8005614:	230d      	movs	r3, #13
 8005616:	e06a      	b.n	80056ee <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	f04f 32ff 	mov.w	r2, #4294967295
 800561e:	615a      	str	r2, [r3, #20]
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800562e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005632:	2b03      	cmp	r3, #3
 8005634:	d149      	bne.n	80056ca <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	3334      	adds	r3, #52	; 0x34
 800563a:	3330      	adds	r3, #48	; 0x30
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe fb43 	bl	8003cc8 <ld_word>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d140      	bne.n	80056ca <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564a:	3301      	adds	r3, #1
 800564c:	4619      	mov	r1, r3
 800564e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005650:	f7fe fdea 	bl	8004228 <move_window>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d137      	bne.n	80056ca <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	2200      	movs	r2, #0
 800565e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	3334      	adds	r3, #52	; 0x34
 8005664:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fb2d 	bl	8003cc8 <ld_word>
 800566e:	4603      	mov	r3, r0
 8005670:	461a      	mov	r2, r3
 8005672:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005676:	429a      	cmp	r2, r3
 8005678:	d127      	bne.n	80056ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	3334      	adds	r3, #52	; 0x34
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fb3a 	bl	8003cf8 <ld_dword>
 8005684:	4602      	mov	r2, r0
 8005686:	4b1c      	ldr	r3, [pc, #112]	; (80056f8 <find_volume+0x4fc>)
 8005688:	429a      	cmp	r2, r3
 800568a:	d11e      	bne.n	80056ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	3334      	adds	r3, #52	; 0x34
 8005690:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fb2f 	bl	8003cf8 <ld_dword>
 800569a:	4602      	mov	r2, r0
 800569c:	4b17      	ldr	r3, [pc, #92]	; (80056fc <find_volume+0x500>)
 800569e:	429a      	cmp	r2, r3
 80056a0:	d113      	bne.n	80056ca <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	3334      	adds	r3, #52	; 0x34
 80056a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fb24 	bl	8003cf8 <ld_dword>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	3334      	adds	r3, #52	; 0x34
 80056ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fb1a 	bl	8003cf8 <ld_dword>
 80056c4:	4602      	mov	r2, r0
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80056d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <find_volume+0x504>)
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <find_volume+0x504>)
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <find_volume+0x504>)
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80056e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056e8:	f7fe fd36 	bl	8004158 <clear_lock>
#endif
	return FR_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3758      	adds	r7, #88	; 0x58
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	41615252 	.word	0x41615252
 80056fc:	61417272 	.word	0x61417272
 8005700:	2000002c 	.word	0x2000002c

08005704 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01a      	beq.n	800574a <validate+0x46>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d016      	beq.n	800574a <validate+0x46>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d011      	beq.n	800574a <validate+0x46>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	88da      	ldrh	r2, [r3, #6]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	889b      	ldrh	r3, [r3, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d10a      	bne.n	800574a <validate+0x46>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fa26 	bl	8003b8c <disk_status>
 8005740:	4603      	mov	r3, r0
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <validate+0x52>
		*fs = 0;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8005750:	2309      	movs	r3, #9
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	e005      	b.n	8005762 <validate+0x5e>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800577e:	f107 0310 	add.w	r3, r7, #16
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff fca0 	bl	80050c8 <get_ldnumber>
 8005788:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	da01      	bge.n	8005794 <f_mount+0x28>
 8005790:	230b      	movs	r3, #11
 8005792:	e02b      	b.n	80057ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005794:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <f_mount+0x88>)
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80057a4:	69b8      	ldr	r0, [r7, #24]
 80057a6:	f7fe fcd7 	bl	8004158 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	490d      	ldr	r1, [pc, #52]	; (80057f4 <f_mount+0x88>)
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <f_mount+0x66>
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d001      	beq.n	80057d6 <f_mount+0x6a>
 80057d2:	2300      	movs	r3, #0
 80057d4:	e00a      	b.n	80057ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80057d6:	f107 010c 	add.w	r1, r7, #12
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	2200      	movs	r2, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fd0b 	bl	80051fc <find_volume>
 80057e6:	4603      	mov	r3, r0
 80057e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000028 	.word	0x20000028

080057f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b098      	sub	sp, #96	; 0x60
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <f_open+0x18>
 800580c:	2309      	movs	r3, #9
 800580e:	e1bb      	b.n	8005b88 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005816:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005818:	79fa      	ldrb	r2, [r7, #7]
 800581a:	f107 0110 	add.w	r1, r7, #16
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fcea 	bl	80051fc <find_volume>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800582e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 819f 	bne.w	8005b76 <f_open+0x37e>
		dj.obj.fs = fs;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	4611      	mov	r1, r2
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fbc9 	bl	8004fdc <follow_path>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005854:	2b00      	cmp	r3, #0
 8005856:	d11a      	bne.n	800588e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005858:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800585c:	b25b      	sxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	da03      	bge.n	800586a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005862:	2306      	movs	r3, #6
 8005864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005868:	e011      	b.n	800588e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	f107 0314 	add.w	r3, r7, #20
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fb20 	bl	8003ec8 <chk_lock>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f003 031c 	and.w	r3, r3, #28
 8005894:	2b00      	cmp	r3, #0
 8005896:	d07f      	beq.n	8005998 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800589c:	2b00      	cmp	r3, #0
 800589e:	d017      	beq.n	80058d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80058a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d10e      	bne.n	80058c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80058a8:	f7fe fb6a 	bl	8003f80 <enq_lock>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <f_open+0xc8>
 80058b2:	f107 0314 	add.w	r3, r7, #20
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fac9 	bl	8004e4e <dir_register>
 80058bc:	4603      	mov	r3, r0
 80058be:	e000      	b.n	80058c2 <f_open+0xca>
 80058c0:	2312      	movs	r3, #18
 80058c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	f043 0308 	orr.w	r3, r3, #8
 80058cc:	71fb      	strb	r3, [r7, #7]
 80058ce:	e010      	b.n	80058f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80058d0:	7ebb      	ldrb	r3, [r7, #26]
 80058d2:	f003 0311 	and.w	r3, r3, #17
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <f_open+0xea>
					res = FR_DENIED;
 80058da:	2307      	movs	r3, #7
 80058dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80058e0:	e007      	b.n	80058f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <f_open+0xfa>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80058f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d168      	bne.n	80059cc <f_open+0x1d4>
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d063      	beq.n	80059cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8005904:	f000 fcc0 	bl	8006288 <get_fattime>
 8005908:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	330e      	adds	r3, #14
 800590e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fa2f 	bl	8003d74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	3316      	adds	r3, #22
 800591a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fa29 	bl	8003d74 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	330b      	adds	r3, #11
 8005926:	2220      	movs	r2, #32
 8005928:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff f9f8 	bl	8004d26 <ld_clust>
 8005936:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800593c:	2200      	movs	r2, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fa10 	bl	8004d64 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	331c      	adds	r3, #28
 8005948:	2100      	movs	r1, #0
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fa12 	bl	8003d74 <st_dword>
					fs->wflag = 1;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2201      	movs	r2, #1
 8005954:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d037      	beq.n	80059cc <f_open+0x1d4>
						dw = fs->winsect;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005962:	f107 0314 	add.w	r3, r7, #20
 8005966:	2200      	movs	r2, #0
 8005968:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe ff00 	bl	8004770 <remove_chain>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800597a:	2b00      	cmp	r3, #0
 800597c:	d126      	bne.n	80059cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe fc50 	bl	8004228 <move_window>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005992:	3a01      	subs	r2, #1
 8005994:	611a      	str	r2, [r3, #16]
 8005996:	e019      	b.n	80059cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800599c:	2b00      	cmp	r3, #0
 800599e:	d115      	bne.n	80059cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80059a0:	7ebb      	ldrb	r3, [r7, #26]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80059aa:	2304      	movs	r3, #4
 80059ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80059b0:	e00c      	b.n	80059cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <f_open+0x1d4>
 80059bc:	7ebb      	ldrb	r3, [r7, #26]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <f_open+0x1d4>
						res = FR_DENIED;
 80059c6:	2307      	movs	r3, #7
 80059c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80059cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d128      	bne.n	8005a26 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80059ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	f023 0301 	bic.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bf14      	ite	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	2300      	moveq	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	f107 0314 	add.w	r3, r7, #20
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fe fad9 	bl	8003fc4 <inc_lock>
 8005a12:	4602      	mov	r2, r0
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <f_open+0x22e>
 8005a20:	2302      	movs	r3, #2
 8005a22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 80a3 	bne.w	8005b76 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a34:	4611      	mov	r1, r2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff f975 	bl	8004d26 <ld_clust>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	331c      	adds	r3, #28
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe f956 	bl	8003cf8 <ld_dword>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	88da      	ldrh	r2, [r3, #6]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	79fa      	ldrb	r2, [r7, #7]
 8005a6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3330      	adds	r3, #48	; 0x30
 8005a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe f9c0 	bl	8003e0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d06e      	beq.n	8005b76 <f_open+0x37e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d06a      	beq.n	8005b76 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	895b      	ldrh	r3, [r3, #10]
 8005aac:	461a      	mov	r2, r3
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	899b      	ldrh	r3, [r3, #12]
 8005ab2:	fb03 f302 	mul.w	r3, r3, r2
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac4:	e016      	b.n	8005af4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fc69 	bl	80043a2 <get_fat>
 8005ad0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d802      	bhi.n	8005ade <f_open+0x2e6>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae4:	d102      	bne.n	8005aec <f_open+0x2f4>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	657b      	str	r3, [r7, #84]	; 0x54
 8005af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <f_open+0x30c>
 8005afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d8e0      	bhi.n	8005ac6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d131      	bne.n	8005b76 <f_open+0x37e>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	899b      	ldrh	r3, [r3, #12]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b1e:	fb02 f201 	mul.w	r2, r2, r1
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d026      	beq.n	8005b76 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe fc19 	bl	8004364 <clust2sect>
 8005b32:	6478      	str	r0, [r7, #68]	; 0x44
 8005b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <f_open+0x34a>
						res = FR_INT_ERR;
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b40:	e019      	b.n	8005b76 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	899b      	ldrh	r3, [r3, #12]
 8005b46:	461a      	mov	r2, r3
 8005b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b50:	441a      	add	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	7858      	ldrb	r0, [r3, #1]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1a      	ldr	r2, [r3, #32]
 8005b64:	2301      	movs	r3, #1
 8005b66:	f7fe f851 	bl	8003c0c <disk_read>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <f_open+0x37e>
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005b76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <f_open+0x38c>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3760      	adds	r7, #96	; 0x60
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08c      	sub	sp, #48	; 0x30
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f107 0210 	add.w	r2, r7, #16
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fda7 	bl	8005704 <validate>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <f_write+0x44>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	7d5b      	ldrb	r3, [r3, #21]
 8005bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <f_write+0x4a>
 8005bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bd8:	e16a      	b.n	8005eb0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	7d1b      	ldrb	r3, [r3, #20]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <f_write+0x5a>
 8005be6:	2307      	movs	r3, #7
 8005be8:	e162      	b.n	8005eb0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	441a      	add	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f080 814c 	bcs.w	8005e94 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005c04:	e146      	b.n	8005e94 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	8992      	ldrh	r2, [r2, #12]
 8005c0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c12:	fb02 f201 	mul.w	r2, r2, r1
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f040 80f1 	bne.w	8005e00 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	8992      	ldrh	r2, [r2, #12]
 8005c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	8952      	ldrh	r2, [r2, #10]
 8005c2e:	3a01      	subs	r2, #1
 8005c30:	4013      	ands	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d143      	bne.n	8005cc2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10c      	bne.n	8005c5c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11a      	bne.n	8005c84 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fdf1 	bl	800483a <create_chain>
 8005c58:	62b8      	str	r0, [r7, #40]	; 0x28
 8005c5a:	e013      	b.n	8005c84 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7fe fe7d 	bl	800496a <clmt_clust>
 8005c70:	62b8      	str	r0, [r7, #40]	; 0x28
 8005c72:	e007      	b.n	8005c84 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f7fe fddc 	bl	800483a <create_chain>
 8005c82:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8109 	beq.w	8005e9e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d104      	bne.n	8005c9c <f_write+0x10c>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2202      	movs	r2, #2
 8005c96:	755a      	strb	r2, [r3, #21]
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e109      	b.n	8005eb0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d104      	bne.n	8005cae <f_write+0x11e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	755a      	strb	r2, [r3, #21]
 8005caa:	2301      	movs	r3, #1
 8005cac:	e100      	b.n	8005eb0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <f_write+0x132>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	7d1b      	ldrb	r3, [r3, #20]
 8005cc6:	b25b      	sxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da18      	bge.n	8005cfe <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	7858      	ldrb	r0, [r3, #1]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f7fd ffb6 	bl	8003c4c <disk_write>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <f_write+0x160>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	755a      	strb	r2, [r3, #21]
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0df      	b.n	8005eb0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	7d1b      	ldrb	r3, [r3, #20]
 8005cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7fe fb2c 	bl	8004364 <clust2sect>
 8005d0c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <f_write+0x18e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2202      	movs	r2, #2
 8005d18:	755a      	strb	r2, [r3, #21]
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e0c8      	b.n	8005eb0 <f_write+0x320>
			sect += csect;
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	4413      	add	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	899b      	ldrh	r3, [r3, #12]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d32:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d043      	beq.n	8005dc2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	4413      	add	r3, r2
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	8952      	ldrh	r2, [r2, #10]
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d905      	bls.n	8005d54 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	895b      	ldrh	r3, [r3, #10]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	7858      	ldrb	r0, [r3, #1]
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	69f9      	ldr	r1, [r7, #28]
 8005d5e:	f7fd ff75 	bl	8003c4c <disk_write>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <f_write+0x1e2>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	755a      	strb	r2, [r3, #21]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e09e      	b.n	8005eb0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1a      	ldr	r2, [r3, #32]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	1ad2      	subs	r2, r2, r3
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d218      	bcs.n	8005db2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	8992      	ldrh	r2, [r2, #12]
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	18d1      	adds	r1, r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	899b      	ldrh	r3, [r3, #12]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f7fe f814 	bl	8003dcc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	7d1b      	ldrb	r3, [r3, #20]
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	899b      	ldrh	r3, [r3, #12]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	fb03 f302 	mul.w	r3, r3, r2
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005dc0:	e04b      	b.n	8005e5a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d016      	beq.n	8005dfa <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d210      	bcs.n	8005dfa <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	7858      	ldrb	r0, [r3, #1]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005de2:	2301      	movs	r3, #1
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	f7fd ff11 	bl	8003c0c <disk_read>
 8005dea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	755a      	strb	r2, [r3, #21]
 8005df6:	2301      	movs	r3, #1
 8005df8:	e05a      	b.n	8005eb0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	899b      	ldrh	r3, [r3, #12]
 8005e04:	4618      	mov	r0, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	8992      	ldrh	r2, [r2, #12]
 8005e0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e12:	fb02 f201 	mul.w	r2, r2, r1
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	1ac3      	subs	r3, r0, r3
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d901      	bls.n	8005e28 <f_write+0x298>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	8992      	ldrh	r2, [r2, #12]
 8005e36:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e3a:	fb02 f200 	mul.w	r2, r2, r0
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	440b      	add	r3, r1
 8005e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e44:	69f9      	ldr	r1, [r7, #28]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd ffc0 	bl	8003dcc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	7d1b      	ldrb	r3, [r3, #20]
 8005e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	4413      	add	r3, r2
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	441a      	add	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	619a      	str	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bf38      	it	cc
 8005e7a:	461a      	movcc	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	441a      	add	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f47f aeb5 	bne.w	8005c06 <f_write+0x76>
 8005e9c:	e000      	b.n	8005ea0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005e9e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	7d1b      	ldrb	r3, [r3, #20]
 8005ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3730      	adds	r7, #48	; 0x30
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f107 0208 	add.w	r2, r7, #8
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fc1b 	bl	8005704 <validate>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d168      	bne.n	8005faa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7d1b      	ldrb	r3, [r3, #20]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d062      	beq.n	8005faa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	7d1b      	ldrb	r3, [r3, #20]
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da15      	bge.n	8005f1a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	7858      	ldrb	r0, [r3, #1]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	2301      	movs	r3, #1
 8005efe:	f7fd fea5 	bl	8003c4c <disk_write>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <f_sync+0x54>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e04f      	b.n	8005fac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	7d1b      	ldrb	r3, [r3, #20]
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005f1a:	f000 f9b5 	bl	8006288 <get_fattime>
 8005f1e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f7fe f97d 	bl	8004228 <move_window>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d138      	bne.n	8005faa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	330b      	adds	r3, #11
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	320b      	adds	r2, #11
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	f042 0220 	orr.w	r2, r2, #32
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	68f9      	ldr	r1, [r7, #12]
 8005f5c:	f7fe ff02 	bl	8004d64 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f103 021c 	add.w	r2, r3, #28
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7fd ff01 	bl	8003d74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3316      	adds	r3, #22
 8005f76:	6939      	ldr	r1, [r7, #16]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fd fefb 	bl	8003d74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3312      	adds	r3, #18
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fd feda 	bl	8003d3e <st_word>
					fs->wflag = 1;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe f976 	bl	8004284 <sync_fs>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7d1b      	ldrb	r3, [r3, #20]
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff7b 	bl	8005eb8 <f_sync>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d118      	bne.n	8005ffe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f107 0208 	add.w	r2, r7, #8
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fb95 	bl	8005704 <validate>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe f879 	bl	80040e0 <dec_lock>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006016:	2301      	movs	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800601e:	4b1f      	ldr	r3, [pc, #124]	; (800609c <FATFS_LinkDriverEx+0x94>)
 8006020:	7a5b      	ldrb	r3, [r3, #9]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d131      	bne.n	800608c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006028:	4b1c      	ldr	r3, [pc, #112]	; (800609c <FATFS_LinkDriverEx+0x94>)
 800602a:	7a5b      	ldrb	r3, [r3, #9]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	4b1a      	ldr	r3, [pc, #104]	; (800609c <FATFS_LinkDriverEx+0x94>)
 8006032:	2100      	movs	r1, #0
 8006034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006036:	4b19      	ldr	r3, [pc, #100]	; (800609c <FATFS_LinkDriverEx+0x94>)
 8006038:	7a5b      	ldrb	r3, [r3, #9]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	4a17      	ldr	r2, [pc, #92]	; (800609c <FATFS_LinkDriverEx+0x94>)
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <FATFS_LinkDriverEx+0x94>)
 8006048:	7a5b      	ldrb	r3, [r3, #9]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <FATFS_LinkDriverEx+0x94>)
 8006050:	4413      	add	r3, r2
 8006052:	79fa      	ldrb	r2, [r7, #7]
 8006054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <FATFS_LinkDriverEx+0x94>)
 8006058:	7a5b      	ldrb	r3, [r3, #9]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	b2d1      	uxtb	r1, r2
 8006060:	4a0e      	ldr	r2, [pc, #56]	; (800609c <FATFS_LinkDriverEx+0x94>)
 8006062:	7251      	strb	r1, [r2, #9]
 8006064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006066:	7dbb      	ldrb	r3, [r7, #22]
 8006068:	3330      	adds	r3, #48	; 0x30
 800606a:	b2da      	uxtb	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3301      	adds	r3, #1
 8006074:	223a      	movs	r2, #58	; 0x3a
 8006076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	3302      	adds	r3, #2
 800607c:	222f      	movs	r2, #47	; 0x2f
 800607e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	3303      	adds	r3, #3
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
}
 800608e:	4618      	mov	r0, r3
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000050 	.word	0x20000050

080060a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80060aa:	2200      	movs	r2, #0
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff ffaa 	bl	8006008 <FATFS_LinkDriverEx>
 80060b4:	4603      	mov	r3, r0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80060ca:	f000 f896 	bl	80061fa <BSP_SD_IsDetected>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e012      	b.n	80060fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80060d8:	480b      	ldr	r0, [pc, #44]	; (8006108 <BSP_SD_Init+0x48>)
 80060da:	f7fb fd1b 	bl	8001b14 <HAL_SD_Init>
 80060de:	4603      	mov	r3, r0
 80060e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80060e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060ec:	4806      	ldr	r0, [pc, #24]	; (8006108 <BSP_SD_Init+0x48>)
 80060ee:	f7fc faf4 	bl	80026da <HAL_SD_ConfigWideBusOperation>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80060fc:	79fb      	ldrb	r3, [r7, #7]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200041fc 	.word	0x200041fc

0800610c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	4806      	ldr	r0, [pc, #24]	; (800613c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006124:	f7fb fd7e 	bl	8001c24 <HAL_SD_ReadBlocks_DMA>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006132:	7dfb      	ldrb	r3, [r7, #23]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	200041fc 	.word	0x200041fc

08006140 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	4806      	ldr	r0, [pc, #24]	; (8006170 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006158:	f7fb fe2e 	bl	8001db8 <HAL_SD_WriteBlocks_DMA>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006166:	7dfb      	ldrb	r3, [r7, #23]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	200041fc 	.word	0x200041fc

08006174 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006178:	4805      	ldr	r0, [pc, #20]	; (8006190 <BSP_SD_GetCardState+0x1c>)
 800617a:	f7fc fb2a 	bl	80027d2 <HAL_SD_GetCardState>
 800617e:	4603      	mov	r3, r0
 8006180:	2b04      	cmp	r3, #4
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200041fc 	.word	0x200041fc

08006194 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4803      	ldr	r0, [pc, #12]	; (80061ac <BSP_SD_GetCardInfo+0x18>)
 80061a0:	f7fc fa6f 	bl	8002682 <HAL_SD_GetCardInfo>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200041fc 	.word	0x200041fc

080061b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80061b8:	f000 f818 	bl	80061ec <BSP_SD_AbortCallback>
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80061cc:	f000 fadc 	bl	8006788 <BSP_SD_WriteCpltCallback>
}
 80061d0:	bf00      	nop
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80061e0:	f000 fade 	bl	80067a0 <BSP_SD_ReadCpltCallback>
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0

}
 80061f0:	bf00      	nop
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006200:	2301      	movs	r3, #1
 8006202:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	b2db      	uxtb	r3, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	4a10      	ldr	r2, [pc, #64]	; (8006260 <MX_DMA_Init+0x4c>)
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <MX_DMA_Init+0x4c>)
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006228:	6313      	str	r3, [r2, #48]	; 0x30
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <MX_DMA_Init+0x4c>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006236:	2200      	movs	r2, #0
 8006238:	2100      	movs	r1, #0
 800623a:	203b      	movs	r0, #59	; 0x3b
 800623c:	f7fa fab5 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006240:	203b      	movs	r0, #59	; 0x3b
 8006242:	f7fa face 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	2045      	movs	r0, #69	; 0x45
 800624c:	f7fa faad 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006250:	2045      	movs	r0, #69	; 0x45
 8006252:	f7fa fac6 	bl	80007e2 <HAL_NVIC_EnableIRQ>

}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800

08006264 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006268:	4904      	ldr	r1, [pc, #16]	; (800627c <MX_FATFS_Init+0x18>)
 800626a:	4805      	ldr	r0, [pc, #20]	; (8006280 <MX_FATFS_Init+0x1c>)
 800626c:	f7ff ff18 	bl	80060a0 <FATFS_LinkDriver>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	4b03      	ldr	r3, [pc, #12]	; (8006284 <MX_FATFS_Init+0x20>)
 8006276:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006278:	bf00      	nop
 800627a:	bd80      	pop	{r7, pc}
 800627c:	2000006c 	.word	0x2000006c
 8006280:	08006cf0 	.word	0x08006cf0
 8006284:	20000068 	.word	0x20000068

08006288 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800628c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800628e:	4618      	mov	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	4a27      	ldr	r2, [pc, #156]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062a4:	4b26      	ldr	r3, [pc, #152]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	6313      	str	r3, [r2, #48]	; 0x30
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	4a20      	ldr	r2, [pc, #128]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062c0:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	f043 0308 	orr.w	r3, r3, #8
 80062c8:	6313      	str	r3, [r2, #48]	; 0x30
 80062ca:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	4a19      	ldr	r2, [pc, #100]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062dc:	4b18      	ldr	r3, [pc, #96]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	f043 0304 	orr.w	r3, r3, #4
 80062e4:	6313      	str	r3, [r2, #48]	; 0x30
 80062e6:	4b16      	ldr	r3, [pc, #88]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	60bb      	str	r3, [r7, #8]
 80062f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	4a12      	ldr	r2, [pc, #72]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <MX_GPIO_Init+0xa8>)
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	6313      	str	r3, [r2, #48]	; 0x30
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <MX_GPIO_Init+0xa8>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800630e:	2200      	movs	r2, #0
 8006310:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8006314:	480b      	ldr	r0, [pc, #44]	; (8006344 <MX_GPIO_Init+0xac>)
 8006316:	f7fa ffdb 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800631a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800631e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006320:	2301      	movs	r3, #1
 8006322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006328:	2300      	movs	r3, #0
 800632a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800632c:	f107 0314 	add.w	r3, r7, #20
 8006330:	4619      	mov	r1, r3
 8006332:	4804      	ldr	r0, [pc, #16]	; (8006344 <MX_GPIO_Init+0xac>)
 8006334:	f7fa fe32 	bl	8000f9c <HAL_GPIO_Init>

}
 8006338:	bf00      	nop
 800633a:	3728      	adds	r7, #40	; 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40023800 	.word	0x40023800
 8006344:	40020c00 	.word	0x40020c00

08006348 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8006348:	b5b0      	push	{r4, r5, r7, lr}
 800634a:	b090      	sub	sp, #64	; 0x40
 800634c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800634e:	f7fa f8c3 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006352:	f000 f863 	bl	800641c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006356:	f7ff ff9f 	bl	8006298 <MX_GPIO_Init>
  MX_DMA_Init();
 800635a:	f7ff ff5b 	bl	8006214 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800635e:	f000 fa2b 	bl	80067b8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8006362:	f7ff ff7f 	bl	8006264 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10);
 8006366:	200a      	movs	r0, #10
 8006368:	f7fa f928 	bl	80005bc <HAL_Delay>

  if(f_mount(&myFatFS, SDPath, 1) == FR_OK)
 800636c:	2201      	movs	r2, #1
 800636e:	4924      	ldr	r1, [pc, #144]	; (8006400 <main+0xb8>)
 8006370:	4824      	ldr	r0, [pc, #144]	; (8006404 <main+0xbc>)
 8006372:	f7ff f9fb 	bl	800576c <f_mount>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d139      	bne.n	80063f0 <main+0xa8>
  {
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800637c:	2201      	movs	r2, #1
 800637e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006382:	4821      	ldr	r0, [pc, #132]	; (8006408 <main+0xc0>)
 8006384:	f7fa ffa4 	bl	80012d0 <HAL_GPIO_WritePin>

  	char myFileName[] = "0627001.txt";
 8006388:	4a20      	ldr	r2, [pc, #128]	; (800640c <main+0xc4>)
 800638a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800638e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006390:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  	if (f_open(&myFile, myFileName, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006398:	220a      	movs	r2, #10
 800639a:	4619      	mov	r1, r3
 800639c:	481c      	ldr	r0, [pc, #112]	; (8006410 <main+0xc8>)
 800639e:	f7ff fa2b 	bl	80057f8 <f_open>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d122      	bne.n	80063ee <main+0xa6>
  	{
  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80063a8:	2201      	movs	r2, #1
 80063aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063ae:	4816      	ldr	r0, [pc, #88]	; (8006408 <main+0xc0>)
 80063b0:	f7fa ff8e 	bl	80012d0 <HAL_GPIO_WritePin>

  		char myData[] = "STM32F4-Discovery. This is SDIO 4-bit mode!!!";
 80063b4:	4b17      	ldr	r3, [pc, #92]	; (8006414 <main+0xcc>)
 80063b6:	1d3c      	adds	r4, r7, #4
 80063b8:	461d      	mov	r5, r3
 80063ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063c6:	c407      	stmia	r4!, {r0, r1, r2}
 80063c8:	8023      	strh	r3, [r4, #0]

  		if(f_write(&myFile, myData, sizeof(myData), &myBytes) == FR_OK)
 80063ca:	1d39      	adds	r1, r7, #4
 80063cc:	4b12      	ldr	r3, [pc, #72]	; (8006418 <main+0xd0>)
 80063ce:	222e      	movs	r2, #46	; 0x2e
 80063d0:	480f      	ldr	r0, [pc, #60]	; (8006410 <main+0xc8>)
 80063d2:	f7ff fbdd 	bl	8005b90 <f_write>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <main+0xa0>
  		{
  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80063dc:	2201      	movs	r2, #1
 80063de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063e2:	4809      	ldr	r0, [pc, #36]	; (8006408 <main+0xc0>)
 80063e4:	f7fa ff74 	bl	80012d0 <HAL_GPIO_WritePin>
  		}

  		f_close(&myFile);
 80063e8:	4809      	ldr	r0, [pc, #36]	; (8006410 <main+0xc8>)
 80063ea:	f7ff fde3 	bl	8005fb4 <f_close>
 80063ee:	e005      	b.n	80063fc <main+0xb4>
  	}
  }
  else 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80063f0:	2201      	movs	r2, #1
 80063f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063f6:	4804      	ldr	r0, [pc, #16]	; (8006408 <main+0xc0>)
 80063f8:	f7fa ff6a 	bl	80012d0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80063fc:	e7fe      	b.n	80063fc <main+0xb4>
 80063fe:	bf00      	nop
 8006400:	2000006c 	.word	0x2000006c
 8006404:	20003108 	.word	0x20003108
 8006408:	40020c00 	.word	0x40020c00
 800640c:	08006c0c 	.word	0x08006c0c
 8006410:	200020d4 	.word	0x200020d4
 8006414:	08006c18 	.word	0x08006c18
 8006418:	20003104 	.word	0x20003104

0800641c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b094      	sub	sp, #80	; 0x50
 8006420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	4a34      	ldr	r2, [pc, #208]	; (80064f8 <SystemClock_Config+0xdc>)
 8006428:	4b33      	ldr	r3, [pc, #204]	; (80064f8 <SystemClock_Config+0xdc>)
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006430:	6413      	str	r3, [r2, #64]	; 0x40
 8006432:	4b31      	ldr	r3, [pc, #196]	; (80064f8 <SystemClock_Config+0xdc>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <SystemClock_Config+0xe0>)
 8006444:	4b2d      	ldr	r3, [pc, #180]	; (80064fc <SystemClock_Config+0xe0>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <SystemClock_Config+0xe0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800645a:	2301      	movs	r3, #1
 800645c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800645e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006464:	2302      	movs	r3, #2
 8006466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006468:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800646c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800646e:	2308      	movs	r3, #8
 8006470:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006472:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006476:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006478:	2302      	movs	r3, #2
 800647a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800647c:	2307      	movs	r3, #7
 800647e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006480:	f107 0320 	add.w	r3, r7, #32
 8006484:	4618      	mov	r0, r3
 8006486:	f7fa ff3d 	bl	8001304 <HAL_RCC_OscConfig>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006490:	21b7      	movs	r1, #183	; 0xb7
 8006492:	481b      	ldr	r0, [pc, #108]	; (8006500 <SystemClock_Config+0xe4>)
 8006494:	f000 f838 	bl	8006508 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006498:	230f      	movs	r3, #15
 800649a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800649c:	2302      	movs	r3, #2
 800649e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80064a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80064a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80064aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	2105      	movs	r1, #5
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fb f966 	bl	8001788 <HAL_RCC_ClockConfig>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <SystemClock_Config+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 80064c2:	21c5      	movs	r1, #197	; 0xc5
 80064c4:	480e      	ldr	r0, [pc, #56]	; (8006500 <SystemClock_Config+0xe4>)
 80064c6:	f000 f81f 	bl	8006508 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80064ca:	f7fb fb17 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 80064ce:	4602      	mov	r2, r0
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <SystemClock_Config+0xe8>)
 80064d2:	fba3 2302 	umull	r2, r3, r3, r2
 80064d6:	099b      	lsrs	r3, r3, #6
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fa f990 	bl	80007fe <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80064de:	2004      	movs	r0, #4
 80064e0:	f7fa f99a 	bl	8000818 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80064e4:	2200      	movs	r2, #0
 80064e6:	2100      	movs	r1, #0
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	f7fa f95d 	bl	80007aa <HAL_NVIC_SetPriority>
}
 80064f0:	bf00      	nop
 80064f2:	3750      	adds	r7, #80	; 0x50
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40023800 	.word	0x40023800
 80064fc:	40007000 	.word	0x40007000
 8006500:	08006c48 	.word	0x08006c48
 8006504:	10624dd3 	.word	0x10624dd3

08006508 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8006512:	e7fe      	b.n	8006512 <_Error_Handler+0xa>

08006514 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <SD_CheckStatus+0x38>)
 8006520:	2201      	movs	r2, #1
 8006522:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006524:	f7ff fe26 	bl	8006174 <BSP_SD_GetCardState>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d107      	bne.n	800653e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800652e:	4b07      	ldr	r3, [pc, #28]	; (800654c <SD_CheckStatus+0x38>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	b2da      	uxtb	r2, r3
 800653a:	4b04      	ldr	r3, [pc, #16]	; (800654c <SD_CheckStatus+0x38>)
 800653c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <SD_CheckStatus+0x38>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	b2db      	uxtb	r3, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000005 	.word	0x20000005

08006550 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <SD_initialize+0x38>)
 800655c:	2201      	movs	r2, #1
 800655e:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006560:	f7ff fdae 	bl	80060c0 <BSP_SD_Init>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff ffd1 	bl	8006514 <SD_CheckStatus>
 8006572:	4603      	mov	r3, r0
 8006574:	461a      	mov	r2, r3
 8006576:	4b04      	ldr	r3, [pc, #16]	; (8006588 <SD_initialize+0x38>)
 8006578:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800657a:	4b03      	ldr	r3, [pc, #12]	; (8006588 <SD_initialize+0x38>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b2db      	uxtb	r3, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000005 	.word	0x20000005

0800658c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff ffbb 	bl	8006514 <SD_CheckStatus>
 800659e:	4603      	mov	r3, r0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 80065bc:	4b1f      	ldr	r3, [pc, #124]	; (800663c <SD_read+0x94>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7ff fda0 	bl	800610c <BSP_SD_ReadBlocks_DMA>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d12f      	bne.n	8006632 <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 80065d2:	f7f9 ffe7 	bl	80005a4 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80065d8:	bf00      	nop
 80065da:	4b18      	ldr	r3, [pc, #96]	; (800663c <SD_read+0x94>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <SD_read+0x4c>
 80065e2:	f7f9 ffdf 	bl	80005a4 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d9f2      	bls.n	80065da <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 80065f4:	4b11      	ldr	r3, [pc, #68]	; (800663c <SD_read+0x94>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d102      	bne.n	8006602 <SD_read+0x5a>
    {
      res = RES_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
 8006600:	e017      	b.n	8006632 <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 8006602:	4b0e      	ldr	r3, [pc, #56]	; (800663c <SD_read+0x94>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 8006608:	f7f9 ffcc 	bl	80005a4 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800660e:	e007      	b.n	8006620 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006610:	f7ff fdb0 	bl	8006174 <BSP_SD_GetCardState>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <SD_read+0x78>
        {
          res = RES_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 800661e:	e008      	b.n	8006632 <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006620:	f7f9 ffc0 	bl	80005a4 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	f247 522f 	movw	r2, #29999	; 0x752f
 800662e:	4293      	cmp	r3, r2
 8006630:	d9ee      	bls.n	8006610 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000060 	.word	0x20000060

08006640 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 8006654:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <SD_write+0x94>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	68b8      	ldr	r0, [r7, #8]
 8006660:	f7ff fd6e 	bl	8006140 <BSP_SD_WriteBlocks_DMA>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d12f      	bne.n	80066ca <SD_write+0x8a>
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 800666a:	f7f9 ff9b 	bl	80005a4 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006670:	bf00      	nop
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <SD_write+0x94>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d108      	bne.n	800668c <SD_write+0x4c>
 800667a:	f7f9 ff93 	bl	80005a4 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f247 522f 	movw	r2, #29999	; 0x752f
 8006688:	4293      	cmp	r3, r2
 800668a:	d9f2      	bls.n	8006672 <SD_write+0x32>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 800668c:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <SD_write+0x94>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <SD_write+0x5a>
    {
      res = RES_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
 8006698:	e017      	b.n	80066ca <SD_write+0x8a>
    }
    else
    {
      WriteStatus = 0;
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <SD_write+0x94>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 80066a0:	f7f9 ff80 	bl	80005a4 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80066a6:	e007      	b.n	80066b8 <SD_write+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80066a8:	f7ff fd64 	bl	8006174 <BSP_SD_GetCardState>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <SD_write+0x78>
        {
          res = RES_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]
          break;
 80066b6:	e008      	b.n	80066ca <SD_write+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80066b8:	f7f9 ff74 	bl	80005a4 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f247 522f 	movw	r2, #29999	; 0x752f
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d9ee      	bls.n	80066a8 <SD_write+0x68>
        }
      }
    }
  }

  return res;
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	2000005c 	.word	0x2000005c

080066d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08c      	sub	sp, #48	; 0x30
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	603a      	str	r2, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
 80066e4:	460b      	mov	r3, r1
 80066e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80066ee:	4b25      	ldr	r3, [pc, #148]	; (8006784 <SD_ioctl+0xac>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <SD_ioctl+0x28>
 80066fc:	2303      	movs	r3, #3
 80066fe:	e03c      	b.n	800677a <SD_ioctl+0xa2>

  switch (cmd)
 8006700:	79bb      	ldrb	r3, [r7, #6]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d834      	bhi.n	8006770 <SD_ioctl+0x98>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <SD_ioctl+0x34>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	0800671d 	.word	0x0800671d
 8006710:	08006725 	.word	0x08006725
 8006714:	0800673d 	.word	0x0800673d
 8006718:	08006757 	.word	0x08006757
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006722:	e028      	b.n	8006776 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fd33 	bl	8006194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800672e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800673a:	e01c      	b.n	8006776 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff fd27 	bl	8006194 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	b29a      	uxth	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006754:	e00f      	b.n	8006776 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006756:	f107 030c 	add.w	r3, r7, #12
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fd1a 	bl	8006194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	0a5a      	lsrs	r2, r3, #9
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800676e:	e002      	b.n	8006776 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006770:	2304      	movs	r3, #4
 8006772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800677a:	4618      	mov	r0, r3
 800677c:	3730      	adds	r7, #48	; 0x30
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000005 	.word	0x20000005

08006788 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <BSP_SD_WriteCpltCallback+0x14>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]
}
 8006792:	bf00      	nop
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	2000005c 	.word	0x2000005c

080067a0 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <BSP_SD_ReadCpltCallback+0x14>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
}
 80067aa:	bf00      	nop
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	20000060 	.word	0x20000060

080067b8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <MX_SDIO_SD_Init+0x38>)
 80067be:	4a0d      	ldr	r2, [pc, #52]	; (80067f4 <MX_SDIO_SD_Init+0x3c>)
 80067c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <MX_SDIO_SD_Init+0x38>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <MX_SDIO_SD_Init+0x38>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80067ce:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <MX_SDIO_SD_Init+0x38>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <MX_SDIO_SD_Init+0x38>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <MX_SDIO_SD_Init+0x38>)
 80067dc:	2200      	movs	r2, #0
 80067de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 6;
 80067e0:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <MX_SDIO_SD_Init+0x38>)
 80067e2:	2206      	movs	r2, #6
 80067e4:	619a      	str	r2, [r3, #24]

}
 80067e6:	bf00      	nop
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	200041fc 	.word	0x200041fc
 80067f4:	40012c00 	.word	0x40012c00

080067f8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a5c      	ldr	r2, [pc, #368]	; (8006978 <HAL_SD_MspInit+0x180>)
 8006806:	4293      	cmp	r3, r2
 8006808:	f040 80b1 	bne.w	800696e <HAL_SD_MspInit+0x176>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800680c:	2300      	movs	r3, #0
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	4a5a      	ldr	r2, [pc, #360]	; (800697c <HAL_SD_MspInit+0x184>)
 8006812:	4b5a      	ldr	r3, [pc, #360]	; (800697c <HAL_SD_MspInit+0x184>)
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800681a:	6453      	str	r3, [r2, #68]	; 0x44
 800681c:	4b57      	ldr	r3, [pc, #348]	; (800697c <HAL_SD_MspInit+0x184>)
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8006828:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800682c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682e:	2302      	movs	r3, #2
 8006830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006836:	2303      	movs	r3, #3
 8006838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800683a:	230c      	movs	r3, #12
 800683c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800683e:	f107 030c 	add.w	r3, r7, #12
 8006842:	4619      	mov	r1, r3
 8006844:	484e      	ldr	r0, [pc, #312]	; (8006980 <HAL_SD_MspInit+0x188>)
 8006846:	f7fa fba9 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800684a:	2304      	movs	r3, #4
 800684c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800684e:	2302      	movs	r3, #2
 8006850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006856:	2303      	movs	r3, #3
 8006858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800685a:	230c      	movs	r3, #12
 800685c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	4619      	mov	r1, r3
 8006864:	4847      	ldr	r0, [pc, #284]	; (8006984 <HAL_SD_MspInit+0x18c>)
 8006866:	f7fa fb99 	bl	8000f9c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800686a:	4b47      	ldr	r3, [pc, #284]	; (8006988 <HAL_SD_MspInit+0x190>)
 800686c:	4a47      	ldr	r2, [pc, #284]	; (800698c <HAL_SD_MspInit+0x194>)
 800686e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006870:	4b45      	ldr	r3, [pc, #276]	; (8006988 <HAL_SD_MspInit+0x190>)
 8006872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006876:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006878:	4b43      	ldr	r3, [pc, #268]	; (8006988 <HAL_SD_MspInit+0x190>)
 800687a:	2200      	movs	r2, #0
 800687c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800687e:	4b42      	ldr	r3, [pc, #264]	; (8006988 <HAL_SD_MspInit+0x190>)
 8006880:	2200      	movs	r2, #0
 8006882:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006884:	4b40      	ldr	r3, [pc, #256]	; (8006988 <HAL_SD_MspInit+0x190>)
 8006886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800688a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800688c:	4b3e      	ldr	r3, [pc, #248]	; (8006988 <HAL_SD_MspInit+0x190>)
 800688e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006892:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006894:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <HAL_SD_MspInit+0x190>)
 8006896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800689a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800689c:	4b3a      	ldr	r3, [pc, #232]	; (8006988 <HAL_SD_MspInit+0x190>)
 800689e:	2220      	movs	r2, #32
 80068a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80068a8:	4b37      	ldr	r3, [pc, #220]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068aa:	2204      	movs	r2, #4
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80068ae:	4b36      	ldr	r3, [pc, #216]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068b0:	2203      	movs	r2, #3
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80068b4:	4b34      	ldr	r3, [pc, #208]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80068bc:	4b32      	ldr	r3, [pc, #200]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80068c4:	4830      	ldr	r0, [pc, #192]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068c6:	f7f9 ffd1 	bl	800086c <HAL_DMA_Init>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_SD_MspInit+0xe0>
    {
      _Error_Handler(__FILE__, __LINE__);
 80068d0:	2183      	movs	r1, #131	; 0x83
 80068d2:	482f      	ldr	r0, [pc, #188]	; (8006990 <HAL_SD_MspInit+0x198>)
 80068d4:	f7ff fe18 	bl	8006508 <_Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80068de:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <HAL_SD_MspInit+0x190>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80068e4:	4b2b      	ldr	r3, [pc, #172]	; (8006994 <HAL_SD_MspInit+0x19c>)
 80068e6:	4a2c      	ldr	r2, [pc, #176]	; (8006998 <HAL_SD_MspInit+0x1a0>)
 80068e8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80068ea:	4b2a      	ldr	r3, [pc, #168]	; (8006994 <HAL_SD_MspInit+0x19c>)
 80068ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068f0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068f2:	4b28      	ldr	r3, [pc, #160]	; (8006994 <HAL_SD_MspInit+0x19c>)
 80068f4:	2240      	movs	r2, #64	; 0x40
 80068f6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068f8:	4b26      	ldr	r3, [pc, #152]	; (8006994 <HAL_SD_MspInit+0x19c>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068fe:	4b25      	ldr	r3, [pc, #148]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006904:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006906:	4b23      	ldr	r3, [pc, #140]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800690c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800690e:	4b21      	ldr	r3, [pc, #132]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006910:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006914:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006916:	4b1f      	ldr	r3, [pc, #124]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006918:	2220      	movs	r2, #32
 800691a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800691c:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <HAL_SD_MspInit+0x19c>)
 800691e:	2200      	movs	r2, #0
 8006920:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006924:	2204      	movs	r2, #4
 8006926:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006928:	4b1a      	ldr	r3, [pc, #104]	; (8006994 <HAL_SD_MspInit+0x19c>)
 800692a:	2203      	movs	r2, #3
 800692c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800692e:	4b19      	ldr	r3, [pc, #100]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006930:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006934:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006936:	4b17      	ldr	r3, [pc, #92]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006938:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800693c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800693e:	4815      	ldr	r0, [pc, #84]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006940:	f7f9 ff94 	bl	800086c <HAL_DMA_Init>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_SD_MspInit+0x15a>
    {
      _Error_Handler(__FILE__, __LINE__);
 800694a:	2198      	movs	r1, #152	; 0x98
 800694c:	4810      	ldr	r0, [pc, #64]	; (8006990 <HAL_SD_MspInit+0x198>)
 800694e:	f7ff fddb 	bl	8006508 <_Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a0f      	ldr	r2, [pc, #60]	; (8006994 <HAL_SD_MspInit+0x19c>)
 8006956:	641a      	str	r2, [r3, #64]	; 0x40
 8006958:	4a0e      	ldr	r2, [pc, #56]	; (8006994 <HAL_SD_MspInit+0x19c>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800695e:	2200      	movs	r2, #0
 8006960:	2100      	movs	r1, #0
 8006962:	2031      	movs	r0, #49	; 0x31
 8006964:	f7f9 ff21 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006968:	2031      	movs	r0, #49	; 0x31
 800696a:	f7f9 ff3a 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800696e:	bf00      	nop
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40023800 	.word	0x40023800
 8006980:	40020800 	.word	0x40020800
 8006984:	40020c00 	.word	0x40020c00
 8006988:	2000413c 	.word	0x2000413c
 800698c:	40026458 	.word	0x40026458
 8006990:	08006c58 	.word	0x08006c58
 8006994:	2000419c 	.word	0x2000419c
 8006998:	400264a0 	.word	0x400264a0

0800699c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
 80069a6:	4a25      	ldr	r2, [pc, #148]	; (8006a3c <HAL_MspInit+0xa0>)
 80069a8:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <HAL_MspInit+0xa0>)
 80069aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069b0:	6453      	str	r3, [r2, #68]	; 0x44
 80069b2:	4b22      	ldr	r3, [pc, #136]	; (8006a3c <HAL_MspInit+0xa0>)
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069be:	2300      	movs	r3, #0
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	4a1e      	ldr	r2, [pc, #120]	; (8006a3c <HAL_MspInit+0xa0>)
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <HAL_MspInit+0xa0>)
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069cc:	6413      	str	r3, [r2, #64]	; 0x40
 80069ce:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <HAL_MspInit+0xa0>)
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80069da:	2007      	movs	r0, #7
 80069dc:	f7f9 feda 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80069e0:	2200      	movs	r2, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	f06f 000b 	mvn.w	r0, #11
 80069e8:	f7f9 fedf 	bl	80007aa <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80069ec:	2200      	movs	r2, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	f06f 000a 	mvn.w	r0, #10
 80069f4:	f7f9 fed9 	bl	80007aa <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80069f8:	2200      	movs	r2, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	f06f 0009 	mvn.w	r0, #9
 8006a00:	f7f9 fed3 	bl	80007aa <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006a04:	2200      	movs	r2, #0
 8006a06:	2100      	movs	r1, #0
 8006a08:	f06f 0004 	mvn.w	r0, #4
 8006a0c:	f7f9 fecd 	bl	80007aa <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006a10:	2200      	movs	r2, #0
 8006a12:	2100      	movs	r1, #0
 8006a14:	f06f 0003 	mvn.w	r0, #3
 8006a18:	f7f9 fec7 	bl	80007aa <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	f06f 0001 	mvn.w	r0, #1
 8006a24:	f7f9 fec1 	bl	80007aa <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	f7f9 febb 	bl	80007aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40023800 	.word	0x40023800

08006a40 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a52:	bf00      	nop
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a60:	f7f9 fd8c 	bl	800057c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006a64:	f7f9 fef4 	bl	8000850 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a68:	bf00      	nop
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006a70:	4802      	ldr	r0, [pc, #8]	; (8006a7c <SDIO_IRQHandler+0x10>)
 8006a72:	f7fb fa6b 	bl	8001f4c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006a76:	bf00      	nop
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200041fc 	.word	0x200041fc

08006a80 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006a84:	4802      	ldr	r0, [pc, #8]	; (8006a90 <DMA2_Stream3_IRQHandler+0x10>)
 8006a86:	f7fa f821 	bl	8000acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	2000413c 	.word	0x2000413c

08006a94 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006a98:	4802      	ldr	r0, [pc, #8]	; (8006aa4 <DMA2_Stream6_IRQHandler+0x10>)
 8006a9a:	f7fa f817 	bl	8000acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006a9e:	bf00      	nop
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	2000419c 	.word	0x2000419c

08006aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006aac:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <SystemInit+0x60>)
 8006aae:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <SystemInit+0x60>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006abc:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <SystemInit+0x64>)
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <SystemInit+0x64>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <SystemInit+0x64>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006ace:	4a0f      	ldr	r2, [pc, #60]	; (8006b0c <SystemInit+0x64>)
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <SystemInit+0x64>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006adc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <SystemInit+0x64>)
 8006ae0:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <SystemInit+0x68>)
 8006ae2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <SystemInit+0x64>)
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <SystemInit+0x64>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <SystemInit+0x64>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006af6:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <SystemInit+0x60>)
 8006af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006afc:	609a      	str	r2, [r3, #8]
#endif
}
 8006afe:	bf00      	nop
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	e000ed00 	.word	0xe000ed00
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	24003010 	.word	0x24003010

08006b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b1a:	e003      	b.n	8006b24 <LoopCopyDataInit>

08006b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b22:	3104      	adds	r1, #4

08006b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b24:	480b      	ldr	r0, [pc, #44]	; (8006b54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b2c:	d3f6      	bcc.n	8006b1c <CopyDataInit>
  ldr  r2, =_sbss
 8006b2e:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b30:	e002      	b.n	8006b38 <LoopFillZerobss>

08006b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b34:	f842 3b04 	str.w	r3, [r2], #4

08006b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b3c:	d3f9      	bcc.n	8006b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b3e:	f7ff ffb3 	bl	8006aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b42:	f000 f811 	bl	8006b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b46:	f7ff fbff 	bl	8006348 <main>
  bx  lr    
 8006b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006b50:	08006d24 	.word	0x08006d24
  ldr  r0, =_sdata
 8006b54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b58:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8006b5c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8006b60:	20004280 	.word	0x20004280

08006b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b64:	e7fe      	b.n	8006b64 <ADC_IRQHandler>
	...

08006b68 <__libc_init_array>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4e0d      	ldr	r6, [pc, #52]	; (8006ba0 <__libc_init_array+0x38>)
 8006b6c:	4c0d      	ldr	r4, [pc, #52]	; (8006ba4 <__libc_init_array+0x3c>)
 8006b6e:	1ba4      	subs	r4, r4, r6
 8006b70:	10a4      	asrs	r4, r4, #2
 8006b72:	2500      	movs	r5, #0
 8006b74:	42a5      	cmp	r5, r4
 8006b76:	d109      	bne.n	8006b8c <__libc_init_array+0x24>
 8006b78:	4e0b      	ldr	r6, [pc, #44]	; (8006ba8 <__libc_init_array+0x40>)
 8006b7a:	4c0c      	ldr	r4, [pc, #48]	; (8006bac <__libc_init_array+0x44>)
 8006b7c:	f000 f818 	bl	8006bb0 <_init>
 8006b80:	1ba4      	subs	r4, r4, r6
 8006b82:	10a4      	asrs	r4, r4, #2
 8006b84:	2500      	movs	r5, #0
 8006b86:	42a5      	cmp	r5, r4
 8006b88:	d105      	bne.n	8006b96 <__libc_init_array+0x2e>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b90:	4798      	blx	r3
 8006b92:	3501      	adds	r5, #1
 8006b94:	e7ee      	b.n	8006b74 <__libc_init_array+0xc>
 8006b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b9a:	4798      	blx	r3
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	e7f2      	b.n	8006b86 <__libc_init_array+0x1e>
 8006ba0:	08006d1c 	.word	0x08006d1c
 8006ba4:	08006d1c 	.word	0x08006d1c
 8006ba8:	08006d1c 	.word	0x08006d1c
 8006bac:	08006d20 	.word	0x08006d20

08006bb0 <_init>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr

08006bbc <_fini>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	bf00      	nop
 8006bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc2:	bc08      	pop	{r3}
 8006bc4:	469e      	mov	lr, r3
 8006bc6:	4770      	bx	lr
